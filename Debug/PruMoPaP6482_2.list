
PruMoPaP6482_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000245c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002678  08002678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002680  08002680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002684  08002684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002694  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008925  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001425  00000000  00000000  0002895a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00029d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cef2  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e5f  00000000  00000000  00047baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8dbf  00000000  00000000  00050a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f97c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc8  00000000  00000000  000f9818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002628 	.word	0x08002628

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002628 	.word	0x08002628

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fcb7 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 fa57 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 fb03 	bl	8000b44 <MX_GPIO_Init>
  MX_SPI1_Init();
 800053e:	f000 faa1 	bl	8000a84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000542:	f000 fad5 	bl	8000af0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	48d7      	ldr	r0, [pc, #860]	; (80008a8 <main+0x37c>)
 800054c:	f000 ff98 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2104      	movs	r1, #4
 8000554:	48d4      	ldr	r0, [pc, #848]	; (80008a8 <main+0x37c>)
 8000556:	f000 ff93 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	2102      	movs	r1, #2
 800055e:	48d2      	ldr	r0, [pc, #840]	; (80008a8 <main+0x37c>)
 8000560:	f000 ff8e 	bl	8001480 <HAL_GPIO_WritePin>
 //  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Estado inicial del pin de selección para la comunicación SPI

   uint8_t comand[]={0};
 8000564:	2300      	movs	r3, #0
 8000566:	723b      	strb	r3, [r7, #8]
   uint8_t direction[]={0};
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]

   uint32_t pasos = 200;
 800056c:	23c8      	movs	r3, #200	; 0xc8
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
   uint8_t fwd = 1;
 8000570:	2301      	movs	r3, #1
 8000572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   uint8_t move = 0x40;
 8000576:	2340      	movs	r3, #64	; 0x40
 8000578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

   uint8_t el_pos = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   uint8_t t_val = 0b01111100;
 8000582:	237c      	movs	r3, #124	; 0x7c
 8000584:	f887 3020 	strb.w	r3, [r7, #32]
   uint8_t t_fast = 0b11111111;
 8000588:	23ff      	movs	r3, #255	; 0xff
 800058a:	77fb      	strb	r3, [r7, #31]
   uint8_t ton_min = 0b11111111;
 800058c:	23ff      	movs	r3, #255	; 0xff
 800058e:	77bb      	strb	r3, [r7, #30]
   uint8_t toff_min = 0b11111111;
 8000590:	23ff      	movs	r3, #255	; 0xff
 8000592:	777b      	strb	r3, [r7, #29]
   uint8_t ocd_th = 0x08;
 8000594:	2308      	movs	r3, #8
 8000596:	773b      	strb	r3, [r7, #28]

   uint8_t step_mode_bit3 = 0x1 << 3;
 8000598:	2308      	movs	r3, #8
 800059a:	76fb      	strb	r3, [r7, #27]
   uint8_t step_sel = (step_mode_bit3 | 0x00);
 800059c:	7efb      	ldrb	r3, [r7, #27]
 800059e:	76bb      	strb	r3, [r7, #26]
   uint8_t sync_sel = 0x00;
 80005a0:	2300      	movs	r3, #0
 80005a2:	767b      	strb	r3, [r7, #25]
   uint8_t step_mode = (sync_sel | \
 80005a4:	7e7a      	ldrb	r2, [r7, #25]
 80005a6:	7ebb      	ldrb	r3, [r7, #26]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	763b      	strb	r3, [r7, #24]
 		  	  	  	  step_sel);

   uint8_t alarm_en = 0b11111111;
 80005ac:	23ff      	movs	r3, #255	; 0xff
 80005ae:	75fb      	strb	r3, [r7, #23]

   uint16_t config_osc_sel = 0x0000;
 80005b0:	2300      	movs	r3, #0
 80005b2:	82bb      	strh	r3, [r7, #20]
   uint16_t config_oc_sd = 0x0080; //Para el motor ante una detección de sobre corriente. 0x0000 para deshabilitarlo.
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	827b      	strh	r3, [r7, #18]
   uint16_t config_pow_sr = 0x0000;
 80005b8:	2300      	movs	r3, #0
 80005ba:	823b      	strh	r3, [r7, #16]
   uint16_t config_tq_reg = 0x0000;
 80005bc:	2300      	movs	r3, #0
 80005be:	81fb      	strh	r3, [r7, #14]
   uint16_t config_toff = 0x007F;
 80005c0:	237f      	movs	r3, #127	; 0x7f
 80005c2:	81bb      	strh	r3, [r7, #12]
   uint16_t config_reg = (config_osc_sel | \
 80005c4:	8aba      	ldrh	r2, [r7, #20]
 80005c6:	8a7b      	ldrh	r3, [r7, #18]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	8a3b      	ldrh	r3, [r7, #16]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	89bb      	ldrh	r3, [r7, #12]
 80005da:	4313      	orrs	r3, r2
 80005dc:	817b      	strh	r3, [r7, #10]
   uint8_t estado_spi_tx;


   //Configuraciones de los modos básicos en los registros esenciales:
   //Posición electrica:
   direction[2] = 0x02;
 80005de:	2302      	movs	r3, #2
 80005e0:	71bb      	strb	r3, [r7, #6]
   comand [2] = el_pos;
 80005e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80005e6:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	48af      	ldr	r0, [pc, #700]	; (80008ac <main+0x380>)
 80005ee:	f000 ff47 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	2201      	movs	r2, #1
 80005f8:	48ad      	ldr	r0, [pc, #692]	; (80008b0 <main+0x384>)
 80005fa:	f001 fd21 	bl	8002040 <HAL_SPI_Transmit>
 80005fe:	4603      	mov	r3, r0
 8000600:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000602:	f107 0108 	add.w	r1, r7, #8
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	2203      	movs	r2, #3
 800060a:	48a9      	ldr	r0, [pc, #676]	; (80008b0 <main+0x384>)
 800060c:	f001 fd18 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	48a5      	ldr	r0, [pc, #660]	; (80008ac <main+0x380>)
 8000616:	f000 ff33 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2102      	movs	r1, #2
 800061e:	48a2      	ldr	r0, [pc, #648]	; (80008a8 <main+0x37c>)
 8000620:	f000 ff2e 	bl	8001480 <HAL_GPIO_WritePin>

   //Valor de regulación de corriente de torque
   direction[2] = 0x09;
 8000624:	2309      	movs	r3, #9
 8000626:	71bb      	strb	r3, [r7, #6]
   comand [2] = t_val;
 8000628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800062c:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	489e      	ldr	r0, [pc, #632]	; (80008ac <main+0x380>)
 8000634:	f000 ff24 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000638:	1d39      	adds	r1, r7, #4
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	2201      	movs	r2, #1
 800063e:	489c      	ldr	r0, [pc, #624]	; (80008b0 <main+0x384>)
 8000640:	f001 fcfe 	bl	8002040 <HAL_SPI_Transmit>
 8000644:	4603      	mov	r3, r0
 8000646:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000648:	f107 0108 	add.w	r1, r7, #8
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	2203      	movs	r2, #3
 8000650:	4897      	ldr	r0, [pc, #604]	; (80008b0 <main+0x384>)
 8000652:	f001 fcf5 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2110      	movs	r1, #16
 800065a:	4894      	ldr	r0, [pc, #592]	; (80008ac <main+0x380>)
 800065c:	f000 ff10 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	4890      	ldr	r0, [pc, #576]	; (80008a8 <main+0x37c>)
 8000666:	f000 ff0b 	bl	8001480 <HAL_GPIO_WritePin>

   //Maximum fast decay time (TOFF_FAST) and the maximum fall step time (FALL_STEP) used by the current control system
   direction[2] = 0x0E;
 800066a:	230e      	movs	r3, #14
 800066c:	71bb      	strb	r3, [r7, #6]
   comand [2] = t_fast;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	488d      	ldr	r0, [pc, #564]	; (80008ac <main+0x380>)
 8000678:	f000 ff02 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 800067c:	1d39      	adds	r1, r7, #4
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	2201      	movs	r2, #1
 8000682:	488b      	ldr	r0, [pc, #556]	; (80008b0 <main+0x384>)
 8000684:	f001 fcdc 	bl	8002040 <HAL_SPI_Transmit>
 8000688:	4603      	mov	r3, r0
 800068a:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 800068c:	f107 0108 	add.w	r1, r7, #8
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	2203      	movs	r2, #3
 8000694:	4886      	ldr	r0, [pc, #536]	; (80008b0 <main+0x384>)
 8000696:	f001 fcd3 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2110      	movs	r1, #16
 800069e:	4883      	ldr	r0, [pc, #524]	; (80008ac <main+0x380>)
 80006a0:	f000 feee 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2102      	movs	r1, #2
 80006a8:	487f      	ldr	r0, [pc, #508]	; (80008a8 <main+0x37c>)
 80006aa:	f000 fee9 	bl	8001480 <HAL_GPIO_WritePin>

   //Mínimo tiempo encendido, en ambos casos se configura con el máximo permitido.
   direction[2] = 0x0F;
 80006ae:	230f      	movs	r3, #15
 80006b0:	71bb      	strb	r3, [r7, #6]
   comand [2] = ton_min;
 80006b2:	7fbb      	ldrb	r3, [r7, #30]
 80006b4:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	487c      	ldr	r0, [pc, #496]	; (80008ac <main+0x380>)
 80006bc:	f000 fee0 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80006c0:	1d39      	adds	r1, r7, #4
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	487a      	ldr	r0, [pc, #488]	; (80008b0 <main+0x384>)
 80006c8:	f001 fcba 	bl	8002040 <HAL_SPI_Transmit>
 80006cc:	4603      	mov	r3, r0
 80006ce:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 80006d0:	f107 0108 	add.w	r1, r7, #8
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2203      	movs	r2, #3
 80006d8:	4875      	ldr	r0, [pc, #468]	; (80008b0 <main+0x384>)
 80006da:	f001 fcb1 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2110      	movs	r1, #16
 80006e2:	4872      	ldr	r0, [pc, #456]	; (80008ac <main+0x380>)
 80006e4:	f000 fecc 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	486e      	ldr	r0, [pc, #440]	; (80008a8 <main+0x37c>)
 80006ee:	f000 fec7 	bl	8001480 <HAL_GPIO_WritePin>

   //Mínimo tiempo apagado
   direction[2] = 0x10;
 80006f2:	2310      	movs	r3, #16
 80006f4:	71bb      	strb	r3, [r7, #6]
   comand [2] = toff_min;
 80006f6:	7f7b      	ldrb	r3, [r7, #29]
 80006f8:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2110      	movs	r1, #16
 80006fe:	486b      	ldr	r0, [pc, #428]	; (80008ac <main+0x380>)
 8000700:	f000 febe 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000704:	1d39      	adds	r1, r7, #4
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4869      	ldr	r0, [pc, #420]	; (80008b0 <main+0x384>)
 800070c:	f001 fc98 	bl	8002040 <HAL_SPI_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000714:	f107 0108 	add.w	r1, r7, #8
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2203      	movs	r2, #3
 800071c:	4864      	ldr	r0, [pc, #400]	; (80008b0 <main+0x384>)
 800071e:	f001 fc8f 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	4861      	ldr	r0, [pc, #388]	; (80008ac <main+0x380>)
 8000728:	f000 feaa 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	485d      	ldr	r0, [pc, #372]	; (80008a8 <main+0x37c>)
 8000732:	f000 fea5 	bl	8001480 <HAL_GPIO_WritePin>

   //Valor de umbral de sobre corriente
   direction[2] = 0x13;
 8000736:	2313      	movs	r3, #19
 8000738:	71bb      	strb	r3, [r7, #6]
   comand [2] = ocd_th;
 800073a:	7f3b      	ldrb	r3, [r7, #28]
 800073c:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2110      	movs	r1, #16
 8000742:	485a      	ldr	r0, [pc, #360]	; (80008ac <main+0x380>)
 8000744:	f000 fe9c 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	4858      	ldr	r0, [pc, #352]	; (80008b0 <main+0x384>)
 8000750:	f001 fc76 	bl	8002040 <HAL_SPI_Transmit>
 8000754:	4603      	mov	r3, r0
 8000756:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000758:	f107 0108 	add.w	r1, r7, #8
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2203      	movs	r2, #3
 8000760:	4853      	ldr	r0, [pc, #332]	; (80008b0 <main+0x384>)
 8000762:	f001 fc6d 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	2110      	movs	r1, #16
 800076a:	4850      	ldr	r0, [pc, #320]	; (80008ac <main+0x380>)
 800076c:	f000 fe88 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	484c      	ldr	r0, [pc, #304]	; (80008a8 <main+0x37c>)
 8000776:	f000 fe83 	bl	8001480 <HAL_GPIO_WritePin>

   // Configuración del modo de paso
   direction[2] = 0x18;
 800077a:	2318      	movs	r3, #24
 800077c:	71bb      	strb	r3, [r7, #6]
   comand [2] = config_reg;
 800077e:	897b      	ldrh	r3, [r7, #10]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2110      	movs	r1, #16
 8000788:	4848      	ldr	r0, [pc, #288]	; (80008ac <main+0x380>)
 800078a:	f000 fe79 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 800078e:	1d39      	adds	r1, r7, #4
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	2201      	movs	r2, #1
 8000794:	4846      	ldr	r0, [pc, #280]	; (80008b0 <main+0x384>)
 8000796:	f001 fc53 	bl	8002040 <HAL_SPI_Transmit>
 800079a:	4603      	mov	r3, r0
 800079c:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 800079e:	f107 0108 	add.w	r1, r7, #8
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2203      	movs	r2, #3
 80007a6:	4842      	ldr	r0, [pc, #264]	; (80008b0 <main+0x384>)
 80007a8:	f001 fc4a 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	483e      	ldr	r0, [pc, #248]	; (80008ac <main+0x380>)
 80007b2:	f000 fe65 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2102      	movs	r1, #2
 80007ba:	483b      	ldr	r0, [pc, #236]	; (80008a8 <main+0x37c>)
 80007bc:	f000 fe60 	bl	8001480 <HAL_GPIO_WritePin>

   //Habilitación de alarmas
   direction[2] = 0x17;
 80007c0:	2317      	movs	r3, #23
 80007c2:	71bb      	strb	r3, [r7, #6]
   comand [2] = alarm_en;
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2110      	movs	r1, #16
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <main+0x380>)
 80007ce:	f000 fe57 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80007d2:	1d39      	adds	r1, r7, #4
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	2201      	movs	r2, #1
 80007d8:	4835      	ldr	r0, [pc, #212]	; (80008b0 <main+0x384>)
 80007da:	f001 fc31 	bl	8002040 <HAL_SPI_Transmit>
 80007de:	4603      	mov	r3, r0
 80007e0:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 80007e2:	f107 0108 	add.w	r1, r7, #8
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	2203      	movs	r2, #3
 80007ea:	4831      	ldr	r0, [pc, #196]	; (80008b0 <main+0x384>)
 80007ec:	f001 fc28 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	482d      	ldr	r0, [pc, #180]	; (80008ac <main+0x380>)
 80007f6:	f000 fe43 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2102      	movs	r1, #2
 80007fe:	482a      	ldr	r0, [pc, #168]	; (80008a8 <main+0x37c>)
 8000800:	f000 fe3e 	bl	8001480 <HAL_GPIO_WritePin>

   //Configuraciones del registro CONFIG
   direction[2] = 0x16;
 8000804:	2316      	movs	r3, #22
 8000806:	71bb      	strb	r3, [r7, #6]
   comand [2] = step_mode;
 8000808:	7e3b      	ldrb	r3, [r7, #24]
 800080a:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2110      	movs	r1, #16
 8000810:	4826      	ldr	r0, [pc, #152]	; (80008ac <main+0x380>)
 8000812:	f000 fe35 	bl	8001480 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000816:	1d39      	adds	r1, r7, #4
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	4824      	ldr	r0, [pc, #144]	; (80008b0 <main+0x384>)
 800081e:	f001 fc0f 	bl	8002040 <HAL_SPI_Transmit>
 8000822:	4603      	mov	r3, r0
 8000824:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000826:	f107 0108 	add.w	r1, r7, #8
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	2203      	movs	r2, #3
 800082e:	4820      	ldr	r0, [pc, #128]	; (80008b0 <main+0x384>)
 8000830:	f001 fc06 	bl	8002040 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	2110      	movs	r1, #16
 8000838:	481c      	ldr	r0, [pc, #112]	; (80008ac <main+0x380>)
 800083a:	f000 fe21 	bl	8001480 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	2102      	movs	r1, #2
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <main+0x37c>)
 8000844:	f000 fe1c 	bl	8001480 <HAL_GPIO_WritePin>



   while (1)
   {
 	  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	2108      	movs	r1, #8
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <main+0x37c>)
 800084e:	f000 fe17 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	2104      	movs	r1, #4
 8000856:	4814      	ldr	r0, [pc, #80]	; (80008a8 <main+0x37c>)
 8000858:	f000 fe12 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	2102      	movs	r1, #2
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <main+0x37c>)
 8000862:	f000 fe0d 	bl	8001480 <HAL_GPIO_WritePin>

 	  direction[2] = (move | fwd);
 8000866:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800086a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800086e:	4313      	orrs	r3, r2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	71bb      	strb	r3, [r7, #6]
 	  comand [2] = pasos >> 16;
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	b2db      	uxtb	r3, r3
 800087a:	72bb      	strb	r3, [r7, #10]
 	  comand [1] = pasos >> 8;
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	727b      	strb	r3, [r7, #9]
 	  comand [0] = pasos;
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	b2db      	uxtb	r3, r3
 8000888:	723b      	strb	r3, [r7, #8]

 	  // Mover motor hacia adelante por 5s
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <main+0x380>)
 8000890:	f000 fdf6 	bl	8001480 <HAL_GPIO_WritePin>
 	  //Se envía la dirección o registro a escribirse
 	  estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000894:	1d39      	adds	r1, r7, #4
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	2201      	movs	r2, #1
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <main+0x384>)
 800089c:	f001 fbd0 	bl	8002040 <HAL_SPI_Transmit>
 80008a0:	4603      	mov	r3, r0
 80008a2:	727b      	strb	r3, [r7, #9]
 	  //Encender LED para depurar
 	  if (estado_spi_tx==HAL_OK) HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 80008a4:	7a7b      	ldrb	r3, [r7, #9]
 80008a6:	e005      	b.n	80008b4 <main+0x388>
 80008a8:	40011000 	.word	0x40011000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	20000028 	.word	0x20000028
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d105      	bne.n	80008c4 <main+0x398>
 80008b8:	2200      	movs	r2, #0
 80008ba:	2102      	movs	r1, #2
 80008bc:	4846      	ldr	r0, [pc, #280]	; (80009d8 <main+0x4ac>)
 80008be:	f000 fddf 	bl	8001480 <HAL_GPIO_WritePin>
 80008c2:	e004      	b.n	80008ce <main+0x3a2>
 	  else HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	4843      	ldr	r0, [pc, #268]	; (80009d8 <main+0x4ac>)
 80008ca:	f000 fdd9 	bl	8001480 <HAL_GPIO_WritePin>
 	  //Se envía el comando
 	  estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 80008ce:	f107 0108 	add.w	r1, r7, #8
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	2203      	movs	r2, #3
 80008d6:	4841      	ldr	r0, [pc, #260]	; (80009dc <main+0x4b0>)
 80008d8:	f001 fbb2 	bl	8002040 <HAL_SPI_Transmit>
 80008dc:	4603      	mov	r3, r0
 80008de:	727b      	strb	r3, [r7, #9]

 	  if (estado_spi_tx==HAL_OK) HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 80008e0:	7a7b      	ldrb	r3, [r7, #9]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d105      	bne.n	80008f2 <main+0x3c6>
 80008e6:	2200      	movs	r2, #0
 80008e8:	2102      	movs	r1, #2
 80008ea:	483b      	ldr	r0, [pc, #236]	; (80009d8 <main+0x4ac>)
 80008ec:	f000 fdc8 	bl	8001480 <HAL_GPIO_WritePin>
 80008f0:	e004      	b.n	80008fc <main+0x3d0>
 	  else HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	4838      	ldr	r0, [pc, #224]	; (80009d8 <main+0x4ac>)
 80008f8:	f000 fdc2 	bl	8001480 <HAL_GPIO_WritePin>

 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	4837      	ldr	r0, [pc, #220]	; (80009e0 <main+0x4b4>)
 8000902:	f000 fdbd 	bl	8001480 <HAL_GPIO_WritePin>

 	//  recibir();
 	  if (estado_rx==HAL_OK) HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 0);
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <main+0x4b8>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d105      	bne.n	800091a <main+0x3ee>
 800090e:	2200      	movs	r2, #0
 8000910:	2104      	movs	r1, #4
 8000912:	4831      	ldr	r0, [pc, #196]	; (80009d8 <main+0x4ac>)
 8000914:	f000 fdb4 	bl	8001480 <HAL_GPIO_WritePin>
 8000918:	e004      	b.n	8000924 <main+0x3f8>
 	  else HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2108      	movs	r1, #8
 800091e:	482e      	ldr	r0, [pc, #184]	; (80009d8 <main+0x4ac>)
 8000920:	f000 fdae 	bl	8001480 <HAL_GPIO_WritePin>

 	  HAL_Delay (5000);
 8000924:	f241 3088 	movw	r0, #5000	; 0x1388
 8000928:	f000 fb1e 	bl	8000f68 <HAL_Delay>
 	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2102      	movs	r1, #2
 8000930:	4829      	ldr	r0, [pc, #164]	; (80009d8 <main+0x4ac>)
 8000932:	f000 fda5 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	2108      	movs	r1, #8
 800093a:	4827      	ldr	r0, [pc, #156]	; (80009d8 <main+0x4ac>)
 800093c:	f000 fda0 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	2104      	movs	r1, #4
 8000944:	4824      	ldr	r0, [pc, #144]	; (80009d8 <main+0x4ac>)
 8000946:	f000 fd9b 	bl	8001480 <HAL_GPIO_WritePin>

 	  //Detener motor
 	  comand [0] = 0xB0;
 800094a:	23b0      	movs	r3, #176	; 0xb0
 800094c:	723b      	strb	r3, [r7, #8]
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <main+0x4b4>)
 8000954:	f000 fd94 	bl	8001480 <HAL_GPIO_WritePin>
 	  estado_spi_tx= HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	2203      	movs	r2, #3
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <main+0x4b0>)
 8000962:	f001 fb6d 	bl	8002040 <HAL_SPI_Transmit>
 8000966:	4603      	mov	r3, r0
 8000968:	727b      	strb	r3, [r7, #9]
 	  if (estado_spi_tx==HAL_OK) HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 800096a:	7a7b      	ldrb	r3, [r7, #9]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d105      	bne.n	800097c <main+0x450>
 8000970:	2200      	movs	r2, #0
 8000972:	2102      	movs	r1, #2
 8000974:	4818      	ldr	r0, [pc, #96]	; (80009d8 <main+0x4ac>)
 8000976:	f000 fd83 	bl	8001480 <HAL_GPIO_WritePin>
 800097a:	e004      	b.n	8000986 <main+0x45a>
 	  else HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2108      	movs	r1, #8
 8000980:	4815      	ldr	r0, [pc, #84]	; (80009d8 <main+0x4ac>)
 8000982:	f000 fd7d 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	2110      	movs	r1, #16
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <main+0x4b4>)
 800098c:	f000 fd78 	bl	8001480 <HAL_GPIO_WritePin>

 	//  recibir();
 	  if (estado_rx==HAL_OK) HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 0);
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <main+0x4b8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d105      	bne.n	80009a4 <main+0x478>
 8000998:	2200      	movs	r2, #0
 800099a:	2104      	movs	r1, #4
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <main+0x4ac>)
 800099e:	f000 fd6f 	bl	8001480 <HAL_GPIO_WritePin>
 80009a2:	e004      	b.n	80009ae <main+0x482>
 	  else HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2108      	movs	r1, #8
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <main+0x4ac>)
 80009aa:	f000 fd69 	bl	8001480 <HAL_GPIO_WritePin>

 	  HAL_Delay (1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fad9 	bl	8000f68 <HAL_Delay>
 	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2102      	movs	r1, #2
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <main+0x4ac>)
 80009bc:	f000 fd60 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2108      	movs	r1, #8
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <main+0x4ac>)
 80009c6:	f000 fd5b 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2104      	movs	r1, #4
 80009ce:	4802      	ldr	r0, [pc, #8]	; (80009d8 <main+0x4ac>)
 80009d0:	f000 fd56 	bl	8001480 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 80009d4:	e738      	b.n	8000848 <main+0x31c>
 80009d6:	bf00      	nop
 80009d8:	40011000 	.word	0x40011000
 80009dc:	20000028 	.word	0x20000028
 80009e0:	40010800 	.word	0x40010800
 80009e4:	200000c8 	.word	0x200000c8

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	2238      	movs	r2, #56	; 0x38
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fe0e 	bl	8002618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fd39 	bl	80014b0 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000a44:	f000 f90c 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f83a 	bl	8001adc <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a6e:	f000 f8f7 	bl	8000c60 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <SystemClock_Config+0x98>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3750      	adds	r7, #80	; 0x50
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	42420070 	.word	0x42420070

08000a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab8:	2210      	movs	r2, #16
 8000aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad6:	f001 fa2f 	bl	8001f38 <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f000 f8be 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000028 	.word	0x20000028
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_USART1_UART_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART1_UART_Init+0x4c>)
 8000b28:	f001 fc74 	bl	8002414 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b32:	f000 f895 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	40013800 	.word	0x40013800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b58:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a3c      	ldr	r2, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a36      	ldr	r2, [pc, #216]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a30      	ldr	r2, [pc, #192]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a2a      	ldr	r2, [pc, #168]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_GPIO_Init+0x10c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SPARE_Pin|LED_ERROR_Pin|LED_BUSY_Pin|LED_READY_Pin
 8000bb8:	2200      	movs	r2, #0
 8000bba:	213f      	movs	r1, #63	; 0x3f
 8000bbc:	4825      	ldr	r0, [pc, #148]	; (8000c54 <MX_GPIO_Init+0x110>)
 8000bbe:	f000 fc5f 	bl	8001480 <HAL_GPIO_WritePin>
                          |SW_Pin|STBY_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STCK_Pin|CS_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2118      	movs	r1, #24
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_GPIO_Init+0x114>)
 8000bc8:	f000 fc5a 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLAG_Pin|BUSY_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bd4:	f000 fc54 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SPARE_Pin LED_ERROR_Pin LED_BUSY_Pin LED_READY_Pin
                           SW_Pin STBY_RESET_Pin */
  GPIO_InitStruct.Pin = LED_SPARE_Pin|LED_ERROR_Pin|LED_BUSY_Pin|LED_READY_Pin
 8000bd8:	233f      	movs	r3, #63	; 0x3f
 8000bda:	613b      	str	r3, [r7, #16]
                          |SW_Pin|STBY_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4819      	ldr	r0, [pc, #100]	; (8000c54 <MX_GPIO_Init+0x110>)
 8000bf0:	f000 fac2 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4814      	ldr	r0, [pc, #80]	; (8000c58 <MX_GPIO_Init+0x114>)
 8000c08:	f000 fab6 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : STCK_Pin CS_Pin */
  GPIO_InitStruct.Pin = STCK_Pin|CS_Pin;
 8000c0c:	2318      	movs	r3, #24
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_GPIO_Init+0x114>)
 8000c24:	f000 faa8 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLAG_Pin BUSY_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin|BUSY_Pin;
 8000c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000c42:	f000 fa99 	bl	8001178 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3720      	adds	r7, #32
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40011000 	.word	0x40011000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_MspInit+0x60>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_MspInit+0x60>)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d12f      	bne.n	8000d50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d20:	23a0      	movs	r3, #160	; 0xa0
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d34:	f000 fa20 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d4c:	f000 fa14 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_UART_MspInit+0x8c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d131      	bne.n	8000de8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000dca:	f000 f9d5 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000de4:	f000 f9c8 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010800 	.word	0x40010800

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e42:	f000 f875 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
	...

08000e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff fff7 	bl	8000e4a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e5e:	490c      	ldr	r1, [pc, #48]	; (8000e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e74:	4c09      	ldr	r4, [pc, #36]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e82:	f001 fba5 	bl	80025d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff fb51 	bl	800052c <main>
  bx lr
 8000e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e94:	08002688 	.word	0x08002688
  ldr r2, =_sbss
 8000e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e9c:	200000d0 	.word	0x200000d0

08000ea0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x28>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x28>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f92b 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fed4 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f935 	bl	800115e <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f90b 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_IncTick+0x20>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200000cc 	.word	0x200000cc

08000f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	200000cc 	.word	0x200000cc

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff fff0 	bl	8000f54 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffe0 	bl	8000f54 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff90 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff49 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff5e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff90 	bl	8001068 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5f 	bl	8001014 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffb0 	bl	80010cc <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	e169      	b.n	8001460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800118c:	2201      	movs	r2, #1
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 8158 	bne.w	800145a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4a9a      	ldr	r2, [pc, #616]	; (8001418 <HAL_GPIO_Init+0x2a0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d05e      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011b4:	4a98      	ldr	r2, [pc, #608]	; (8001418 <HAL_GPIO_Init+0x2a0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d875      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011ba:	4a98      	ldr	r2, [pc, #608]	; (800141c <HAL_GPIO_Init+0x2a4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d058      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011c0:	4a96      	ldr	r2, [pc, #600]	; (800141c <HAL_GPIO_Init+0x2a4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d86f      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <HAL_GPIO_Init+0x2a8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d052      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011cc:	4a94      	ldr	r2, [pc, #592]	; (8001420 <HAL_GPIO_Init+0x2a8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d869      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011d2:	4a94      	ldr	r2, [pc, #592]	; (8001424 <HAL_GPIO_Init+0x2ac>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d04c      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011d8:	4a92      	ldr	r2, [pc, #584]	; (8001424 <HAL_GPIO_Init+0x2ac>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d863      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011de:	4a92      	ldr	r2, [pc, #584]	; (8001428 <HAL_GPIO_Init+0x2b0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d046      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
 80011e4:	4a90      	ldr	r2, [pc, #576]	; (8001428 <HAL_GPIO_Init+0x2b0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d85d      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d82a      	bhi.n	8001244 <HAL_GPIO_Init+0xcc>
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d859      	bhi.n	80012a6 <HAL_GPIO_Init+0x12e>
 80011f2:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <HAL_GPIO_Init+0x80>)
 80011f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f8:	08001273 	.word	0x08001273
 80011fc:	0800124d 	.word	0x0800124d
 8001200:	0800125f 	.word	0x0800125f
 8001204:	080012a1 	.word	0x080012a1
 8001208:	080012a7 	.word	0x080012a7
 800120c:	080012a7 	.word	0x080012a7
 8001210:	080012a7 	.word	0x080012a7
 8001214:	080012a7 	.word	0x080012a7
 8001218:	080012a7 	.word	0x080012a7
 800121c:	080012a7 	.word	0x080012a7
 8001220:	080012a7 	.word	0x080012a7
 8001224:	080012a7 	.word	0x080012a7
 8001228:	080012a7 	.word	0x080012a7
 800122c:	080012a7 	.word	0x080012a7
 8001230:	080012a7 	.word	0x080012a7
 8001234:	080012a7 	.word	0x080012a7
 8001238:	080012a7 	.word	0x080012a7
 800123c:	08001255 	.word	0x08001255
 8001240:	08001269 	.word	0x08001269
 8001244:	4a79      	ldr	r2, [pc, #484]	; (800142c <HAL_GPIO_Init+0x2b4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800124a:	e02c      	b.n	80012a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e029      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	3304      	adds	r3, #4
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e024      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	3308      	adds	r3, #8
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e01f      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	330c      	adds	r3, #12
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e01a      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800127a:	2304      	movs	r3, #4
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e013      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	611a      	str	r2, [r3, #16]
          break;
 8001292:	e009      	b.n	80012a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	615a      	str	r2, [r3, #20]
          break;
 800129e:	e003      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x130>
          break;
 80012a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2bff      	cmp	r3, #255	; 0xff
 80012ac:	d801      	bhi.n	80012b2 <HAL_GPIO_Init+0x13a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_Init+0x13e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3304      	adds	r3, #4
 80012b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d802      	bhi.n	80012c4 <HAL_GPIO_Init+0x14c>
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	e002      	b.n	80012ca <HAL_GPIO_Init+0x152>
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	3b08      	subs	r3, #8
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	210f      	movs	r1, #15
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	6a39      	ldr	r1, [r7, #32]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 80b1 	beq.w	800145a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_GPIO_Init+0x2b8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x2b8>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_GPIO_Init+0x2b8>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001310:	4a48      	ldr	r2, [pc, #288]	; (8001434 <HAL_GPIO_Init+0x2bc>)
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <HAL_GPIO_Init+0x2c0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x1ec>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3f      	ldr	r2, [pc, #252]	; (800143c <HAL_GPIO_Init+0x2c4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1e8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <HAL_GPIO_Init+0x2c8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1e4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3d      	ldr	r2, [pc, #244]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1e0>
 8001354:	2303      	movs	r3, #3
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 8001358:	2304      	movs	r3, #4
 800135a:	e004      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 800135c:	2302      	movs	r3, #2
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_GPIO_Init+0x1ee>
 8001364:	2300      	movs	r3, #0
 8001366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001376:	492f      	ldr	r1, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x2bc>)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	492c      	ldr	r1, [pc, #176]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4928      	ldr	r1, [pc, #160]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4922      	ldr	r1, [pc, #136]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	491e      	ldr	r1, [pc, #120]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4918      	ldr	r1, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	4914      	ldr	r1, [pc, #80]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d021      	beq.n	800144c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	490e      	ldr	r1, [pc, #56]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e021      	b.n	800145a <HAL_GPIO_Init+0x2e2>
 8001416:	bf00      	nop
 8001418:	10320000 	.word	0x10320000
 800141c:	10310000 	.word	0x10310000
 8001420:	10220000 	.word	0x10220000
 8001424:	10210000 	.word	0x10210000
 8001428:	10120000 	.word	0x10120000
 800142c:	10110000 	.word	0x10110000
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	40010800 	.word	0x40010800
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40011000 	.word	0x40011000
 8001444:	40011400 	.word	0x40011400
 8001448:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_GPIO_Init+0x304>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	43db      	mvns	r3, r3
 8001454:	4909      	ldr	r1, [pc, #36]	; (800147c <HAL_GPIO_Init+0x304>)
 8001456:	4013      	ands	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	3301      	adds	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	f47f ae8e 	bne.w	800118c <HAL_GPIO_Init+0x14>
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	372c      	adds	r7, #44	; 0x2c
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e304      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
 80014e8:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b89      	ldr	r3, [pc, #548]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06c      	beq.n	80015dc <HAL_RCC_OscConfig+0x12c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d168      	bne.n	80015dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e2de      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x76>
 8001518:	4b80      	ldr	r3, [pc, #512]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a7f      	ldr	r2, [pc, #508]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7a      	ldr	r2, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b78      	ldr	r3, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a77      	ldr	r2, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xbc>
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a71      	ldr	r2, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6e      	ldr	r2, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 800156c:	4b6b      	ldr	r3, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a67      	ldr	r2, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fce2 	bl	8000f54 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fcde 	bl	8000f54 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e292      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe4>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcce 	bl	8000f54 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fcca 	bl	8000f54 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e27e      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x10c>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ea:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e252      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4939      	ldr	r1, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fc83 	bl	8000f54 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fc7f 	bl	8000f54 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e233      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4927      	ldr	r1, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fc62 	bl	8000f54 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fc5e 	bl	8000f54 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e212      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03a      	beq.n	8001734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fc42 	bl	8000f54 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc3e 	bl	8000f54 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1f2      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 fc02 	bl	8001efc <RCC_Delay>
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fc28 	bl	8000f54 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc24 	bl	8000f54 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d908      	bls.n	8001728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1d8      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	42420000 	.word	0x42420000
 8001724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b9b      	ldr	r3, [pc, #620]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e9      	bne.n	8001708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a6 	beq.w	800188e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b94      	ldr	r3, [pc, #592]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10d      	bne.n	800176e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b91      	ldr	r3, [pc, #580]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a90      	ldr	r2, [pc, #576]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b8b      	ldr	r3, [pc, #556]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a87      	ldr	r2, [pc, #540]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fbe5 	bl	8000f54 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff fbe1 	bl	8000f54 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	; 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e195      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b7e      	ldr	r3, [pc, #504]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x312>
 80017b4:	4b78      	ldr	r3, [pc, #480]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a77      	ldr	r2, [pc, #476]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e02d      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x334>
 80017ca:	4b73      	ldr	r3, [pc, #460]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a72      	ldr	r2, [pc, #456]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	4b70      	ldr	r3, [pc, #448]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a6f      	ldr	r2, [pc, #444]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	e01c      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x356>
 80017ec:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a69      	ldr	r2, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b67      	ldr	r3, [pc, #412]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a63      	ldr	r2, [pc, #396]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b61      	ldr	r3, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a60      	ldr	r2, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d015      	beq.n	8001852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fb95 	bl	8000f54 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fb91 	bl	8000f54 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e143      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ee      	beq.n	800182e <HAL_RCC_OscConfig+0x37e>
 8001850:	e014      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fb7f 	bl	8000f54 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fb7b 	bl	8000f54 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e12d      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b45      	ldr	r3, [pc, #276]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a44      	ldr	r2, [pc, #272]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 808c 	beq.w	80019b0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001898:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d10e      	bne.n	80018c4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e103      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d14e      	bne.n	800196a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0ef      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_RCC_OscConfig+0x4f0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb2f 	bl	8000f54 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80018fa:	f7ff fb2b 	bl	8000f54 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	; 0x64
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0df      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	491c      	ldr	r1, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001926:	4313      	orrs	r3, r2
 8001928:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4918      	ldr	r1, [pc, #96]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001938:	4313      	orrs	r3, r2
 800193a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x4f0>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb07 	bl	8000f54 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800194a:	f7ff fb03 	bl	8000f54 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b64      	cmp	r3, #100	; 0x64
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0b7      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x49a>
 8001968:	e022      	b.n	80019b0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_RCC_OscConfig+0x4f0>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff faea 	bl	8000f54 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001982:	e00f      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001984:	f7ff fae6 	bl	8000f54 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d908      	bls.n	80019a4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e09a      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
 80019a0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80019a4:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e9      	bne.n	8001984 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8088 	beq.w	8001aca <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ba:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d068      	beq.n	8001a98 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d14d      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fabe 	bl	8000f54 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff faba 	bl	8000f54 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e06e      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d10f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4931      	ldr	r1, [pc, #196]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f023 020f 	bic.w	r2, r3, #15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	430b      	orrs	r3, r1
 8001a36:	4927      	ldr	r1, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fa87 	bl	8000f54 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fa83 	bl	8000f54 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e037      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x59a>
 8001a68:	e02f      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fa70 	bl	8000f54 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fa6c 	bl	8000f54 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e020      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5c8>
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e013      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x624>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	42420060 	.word	0x42420060

08001adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0d0      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d910      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 0207 	bic.w	r2, r3, #7
 8001b06:	4965      	ldr	r1, [pc, #404]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d040      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d115      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e073      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4936      	ldr	r1, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f9c2 	bl	8000f54 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f9be 	bl	8000f54 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e053      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d210      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1d0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f920 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08002640 	.word	0x08002640
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b092      	sub	sp, #72	; 0x48
 8001cb6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d002      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d003      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ce8:	e0c3      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001cee:	e0c3      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf2:	0c9b      	lsrs	r3, r3, #18
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ac 	beq.w	8001e62 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001d0a:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808c 	beq.w	8001e3e <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001d26:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	3301      	adds	r3, #1
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3302      	adds	r3, #2
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	2200      	movs	r2, #0
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	627a      	str	r2, [r7, #36]	; 0x24
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4611      	mov	r1, r2
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	fb00 f203 	mul.w	r2, r0, r3
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	fb03 f301 	mul.w	r3, r3, r1
 8001d5e:	4413      	add	r3, r2
 8001d60:	6a3a      	ldr	r2, [r7, #32]
 8001d62:	fba2 4500 	umull	r4, r5, r2, r0
 8001d66:	442b      	add	r3, r5
 8001d68:	461d      	mov	r5, r3
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	462b      	mov	r3, r5
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	0159      	lsls	r1, r3, #5
 8001d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7c:	0150      	lsls	r0, r2, #5
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ebb2 0a04 	subs.w	sl, r2, r4
 8001d86:	eb63 0b05 	sbc.w	fp, r3, r5
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d96:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d9a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001da2:	eb63 090b 	sbc.w	r9, r3, fp
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dba:	4690      	mov	r8, r2
 8001dbc:	4699      	mov	r9, r3
 8001dbe:	eb18 0304 	adds.w	r3, r8, r4
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	eb49 0305 	adc.w	r3, r9, r5
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	024b      	lsls	r3, r1, #9
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	4604      	mov	r4, r0
 8001de0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001de4:	4601      	mov	r1, r0
 8001de6:	024a      	lsls	r2, r1, #9
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	2200      	movs	r2, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	617a      	str	r2, [r7, #20]
 8001df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df6:	2200      	movs	r2, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	60fa      	str	r2, [r7, #12]
 8001dfc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e00:	4622      	mov	r2, r4
 8001e02:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e06:	4645      	mov	r5, r8
 8001e08:	fb05 f202 	mul.w	r2, r5, r2
 8001e0c:	46cc      	mov	ip, r9
 8001e0e:	4625      	mov	r5, r4
 8001e10:	461c      	mov	r4, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	fb03 f30c 	mul.w	r3, r3, ip
 8001e18:	4413      	add	r3, r2
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	4644      	mov	r4, r8
 8001e1e:	fba2 2404 	umull	r2, r4, r2, r4
 8001e22:	61fc      	str	r4, [r7, #28]
 8001e24:	61ba      	str	r2, [r7, #24]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e30:	f7fe f9f8 	bl	8000224 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e3c:	e007      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001e50:	7b5b      	ldrb	r3, [r3, #13]
 8001e52:	461a      	mov	r2, r3
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e60:	e004      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001e70:	e002      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001e76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3748      	adds	r7, #72	; 0x48
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	08002658 	.word	0x08002658
 8001e90:	08002668 	.word	0x08002668
 8001e94:	003d0900 	.word	0x003d0900

08001e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	f7ff fff2 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08002650 	.word	0x08002650

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	0adb      	lsrs	r3, r3, #11
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08002650 	.word	0x08002650

08001efc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <RCC_Delay+0x34>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <RCC_Delay+0x38>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a5b      	lsrs	r3, r3, #9
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f18:	bf00      	nop
  }
  while (Delay --);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	60fa      	str	r2, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <RCC_Delay+0x1c>
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000000 	.word	0x20000000
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e076      	b.n	8002038 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f5a:	d009      	beq.n	8001f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
 8001f62:	e005      	b.n	8001f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fea0 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	ea42 0103 	orr.w	r1, r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	0c1a      	lsrs	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 0204 	and.w	r2, r2, #4
 8002016:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002026:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_SPI_Transmit+0x22>
 800205e:	2302      	movs	r3, #2
 8002060:	e12d      	b.n	80022be <HAL_SPI_Transmit+0x27e>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800206a:	f7fe ff73 	bl	8000f54 <HAL_GetTick>
 800206e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d002      	beq.n	8002086 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002080:	2302      	movs	r3, #2
 8002082:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002084:	e116      	b.n	80022b4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Transmit+0x52>
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002096:	e10d      	b.n	80022b4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020de:	d10f      	bne.n	8002100 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d007      	beq.n	800211e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002126:	d14f      	bne.n	80021c8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_SPI_Transmit+0xf6>
 8002130:	8afb      	ldrh	r3, [r7, #22]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d142      	bne.n	80021bc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	1c9a      	adds	r2, r3, #2
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800215a:	e02f      	b.n	80021bc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d112      	bne.n	8002190 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	1c9a      	adds	r2, r3, #2
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	86da      	strh	r2, [r3, #54]	; 0x36
 800218e:	e015      	b.n	80021bc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002190:	f7fe fee0 	bl	8000f54 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d803      	bhi.n	80021a8 <HAL_SPI_Transmit+0x168>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d102      	bne.n	80021ae <HAL_SPI_Transmit+0x16e>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80021ba:	e07b      	b.n	80022b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ca      	bne.n	800215c <HAL_SPI_Transmit+0x11c>
 80021c6:	e050      	b.n	800226a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_SPI_Transmit+0x196>
 80021d0:	8afb      	ldrh	r3, [r7, #22]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d144      	bne.n	8002260 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	330c      	adds	r3, #12
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021fc:	e030      	b.n	8002260 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b02      	cmp	r3, #2
 800220a:	d113      	bne.n	8002234 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	330c      	adds	r3, #12
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	86da      	strh	r2, [r3, #54]	; 0x36
 8002232:	e015      	b.n	8002260 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002234:	f7fe fe8e 	bl	8000f54 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d803      	bhi.n	800224c <HAL_SPI_Transmit+0x20c>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d102      	bne.n	8002252 <HAL_SPI_Transmit+0x212>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800225e:	e029      	b.n	80022b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1c9      	bne.n	80021fe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8b2 	bl	80023d8 <SPI_EndRxTxTransaction>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	77fb      	strb	r3, [r7, #31]
 80022aa:	e003      	b.n	80022b4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022d8:	f7fe fe3c 	bl	8000f54 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022e8:	f7fe fe34 	bl	8000f54 <HAL_GetTick>
 80022ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	0d1b      	lsrs	r3, r3, #20
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022fe:	e054      	b.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002306:	d050      	beq.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002308:	f7fe fe24 	bl	8000f54 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	429a      	cmp	r2, r3
 8002316:	d902      	bls.n	800231e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d13d      	bne.n	800239a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800232c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002336:	d111      	bne.n	800235c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002340:	d004      	beq.n	800234c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d107      	bne.n	800235c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d10f      	bne.n	8002386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e017      	b.n	80023ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d19b      	bne.n	8002300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000000 	.word	0x20000000

080023d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff ff6a 	bl	80022c8 <SPI_WaitFlagStateUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e000      	b.n	800240c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e042      	b.n	80024ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fc92 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f82b 	bl	80024b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800246c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800247c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800248c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024ee:	f023 030c 	bic.w	r3, r3, #12
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <UART_SetConfig+0x114>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d103      	bne.n	8002524 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800251c:	f7ff fcda 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	e002      	b.n	800252a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002524:	f7ff fcc2 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8002528:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	441a      	add	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	4a22      	ldr	r2, [pc, #136]	; (80025cc <UART_SetConfig+0x118>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	0119      	lsls	r1, r3, #4
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009a      	lsls	r2, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <UART_SetConfig+0x118>)
 8002562:	fba3 0302 	umull	r0, r3, r3, r2
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	fb00 f303 	mul.w	r3, r0, r3
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	3332      	adds	r3, #50	; 0x32
 8002574:	4a15      	ldr	r2, [pc, #84]	; (80025cc <UART_SetConfig+0x118>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002580:	4419      	add	r1, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009a      	lsls	r2, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fbb2 f2f3 	udiv	r2, r2, r3
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <UART_SetConfig+0x118>)
 800259a:	fba3 0302 	umull	r0, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	fb00 f303 	mul.w	r3, r0, r3
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	3332      	adds	r3, #50	; 0x32
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <UART_SetConfig+0x118>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	440a      	add	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013800 	.word	0x40013800
 80025cc:	51eb851f 	.word	0x51eb851f

080025d0 <__libc_init_array>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	2600      	movs	r6, #0
 80025d4:	4d0c      	ldr	r5, [pc, #48]	; (8002608 <__libc_init_array+0x38>)
 80025d6:	4c0d      	ldr	r4, [pc, #52]	; (800260c <__libc_init_array+0x3c>)
 80025d8:	1b64      	subs	r4, r4, r5
 80025da:	10a4      	asrs	r4, r4, #2
 80025dc:	42a6      	cmp	r6, r4
 80025de:	d109      	bne.n	80025f4 <__libc_init_array+0x24>
 80025e0:	f000 f822 	bl	8002628 <_init>
 80025e4:	2600      	movs	r6, #0
 80025e6:	4d0a      	ldr	r5, [pc, #40]	; (8002610 <__libc_init_array+0x40>)
 80025e8:	4c0a      	ldr	r4, [pc, #40]	; (8002614 <__libc_init_array+0x44>)
 80025ea:	1b64      	subs	r4, r4, r5
 80025ec:	10a4      	asrs	r4, r4, #2
 80025ee:	42a6      	cmp	r6, r4
 80025f0:	d105      	bne.n	80025fe <__libc_init_array+0x2e>
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f8:	4798      	blx	r3
 80025fa:	3601      	adds	r6, #1
 80025fc:	e7ee      	b.n	80025dc <__libc_init_array+0xc>
 80025fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002602:	4798      	blx	r3
 8002604:	3601      	adds	r6, #1
 8002606:	e7f2      	b.n	80025ee <__libc_init_array+0x1e>
 8002608:	08002680 	.word	0x08002680
 800260c:	08002680 	.word	0x08002680
 8002610:	08002680 	.word	0x08002680
 8002614:	08002684 	.word	0x08002684

08002618 <memset>:
 8002618:	4603      	mov	r3, r0
 800261a:	4402      	add	r2, r0
 800261c:	4293      	cmp	r3, r2
 800261e:	d100      	bne.n	8002622 <memset+0xa>
 8002620:	4770      	bx	lr
 8002622:	f803 1b01 	strb.w	r1, [r3], #1
 8002626:	e7f9      	b.n	800261c <memset+0x4>

08002628 <_init>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr

08002634 <_fini>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	bf00      	nop
 8002638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263a:	bc08      	pop	{r3}
 800263c:	469e      	mov	lr, r3
 800263e:	4770      	bx	lr
