
PruMoPaP6482_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003238  08003238  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003240  08003240  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003254  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003254  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a2e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001779  00000000  00000000  00029a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d08a  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a144  00000000  00000000  000492d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9054  00000000  00000000  00053416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc46a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002270  00000000  00000000  000fc4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	080031e4 	.word	0x080031e4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	080031e4 	.word	0x080031e4

08000228 <__aeabi_d2uiz>:
 8000228:	004a      	lsls	r2, r1, #1
 800022a:	d211      	bcs.n	8000250 <__aeabi_d2uiz+0x28>
 800022c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000230:	d211      	bcs.n	8000256 <__aeabi_d2uiz+0x2e>
 8000232:	d50d      	bpl.n	8000250 <__aeabi_d2uiz+0x28>
 8000234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800023c:	d40e      	bmi.n	800025c <__aeabi_d2uiz+0x34>
 800023e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800024a:	fa23 f002 	lsr.w	r0, r3, r2
 800024e:	4770      	bx	lr
 8000250:	f04f 0000 	mov.w	r0, #0
 8000254:	4770      	bx	lr
 8000256:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800025a:	d102      	bne.n	8000262 <__aeabi_d2uiz+0x3a>
 800025c:	f04f 30ff 	mov.w	r0, #4294967295
 8000260:	4770      	bx	lr
 8000262:	f04f 0000 	mov.w	r0, #0
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b976 	b.w	800056c <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9e08      	ldr	r6, [sp, #32]
 800029e:	460d      	mov	r5, r1
 80002a0:	4604      	mov	r4, r0
 80002a2:	4688      	mov	r8, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14d      	bne.n	8000344 <__udivmoddi4+0xac>
 80002a8:	428a      	cmp	r2, r1
 80002aa:	4694      	mov	ip, r2
 80002ac:	d968      	bls.n	8000380 <__udivmoddi4+0xe8>
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	b152      	cbz	r2, 80002ca <__udivmoddi4+0x32>
 80002b4:	fa01 f302 	lsl.w	r3, r1, r2
 80002b8:	f1c2 0120 	rsb	r1, r2, #32
 80002bc:	fa20 f101 	lsr.w	r1, r0, r1
 80002c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c4:	ea41 0803 	orr.w	r8, r1, r3
 80002c8:	4094      	lsls	r4, r2
 80002ca:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002ce:	fbb8 f7f1 	udiv	r7, r8, r1
 80002d2:	fa1f fe8c 	uxth.w	lr, ip
 80002d6:	fb01 8817 	mls	r8, r1, r7, r8
 80002da:	fb07 f00e 	mul.w	r0, r7, lr
 80002de:	0c23      	lsrs	r3, r4, #16
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	4298      	cmp	r0, r3
 80002e6:	d90a      	bls.n	80002fe <__udivmoddi4+0x66>
 80002e8:	eb1c 0303 	adds.w	r3, ip, r3
 80002ec:	f107 35ff 	add.w	r5, r7, #4294967295
 80002f0:	f080 811e 	bcs.w	8000530 <__udivmoddi4+0x298>
 80002f4:	4298      	cmp	r0, r3
 80002f6:	f240 811b 	bls.w	8000530 <__udivmoddi4+0x298>
 80002fa:	3f02      	subs	r7, #2
 80002fc:	4463      	add	r3, ip
 80002fe:	1a1b      	subs	r3, r3, r0
 8000300:	fbb3 f0f1 	udiv	r0, r3, r1
 8000304:	fb01 3310 	mls	r3, r1, r0, r3
 8000308:	fb00 fe0e 	mul.w	lr, r0, lr
 800030c:	b2a4      	uxth	r4, r4
 800030e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000312:	45a6      	cmp	lr, r4
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x94>
 8000316:	eb1c 0404 	adds.w	r4, ip, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8109 	bcs.w	8000534 <__udivmoddi4+0x29c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8106 	bls.w	8000534 <__udivmoddi4+0x29c>
 8000328:	4464      	add	r4, ip
 800032a:	3802      	subs	r0, #2
 800032c:	2100      	movs	r1, #0
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa8>
 8000338:	2300      	movs	r3, #0
 800033a:	40d4      	lsrs	r4, r2
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0xc2>
 8000348:	2e00      	cmp	r6, #0
 800034a:	f000 80ee 	beq.w	800052a <__udivmoddi4+0x292>
 800034e:	2100      	movs	r1, #0
 8000350:	e9c6 0500 	strd	r0, r5, [r6]
 8000354:	4608      	mov	r0, r1
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x160>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xd4>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80fc 	bhi.w	8000564 <__udivmoddi4+0x2cc>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb65 0303 	sbc.w	r3, r5, r3
 8000372:	2001      	movs	r0, #1
 8000374:	4698      	mov	r8, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d0e2      	beq.n	8000340 <__udivmoddi4+0xa8>
 800037a:	e9c6 4800 	strd	r4, r8, [r6]
 800037e:	e7df      	b.n	8000340 <__udivmoddi4+0xa8>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xec>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	2a00      	cmp	r2, #0
 800038a:	f040 8091 	bne.w	80004b0 <__udivmoddi4+0x218>
 800038e:	eba1 000c 	sub.w	r0, r1, ip
 8000392:	2101      	movs	r1, #1
 8000394:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fbb0 f3f7 	udiv	r3, r0, r7
 80003a0:	fb07 0013 	mls	r0, r7, r3, r0
 80003a4:	0c25      	lsrs	r5, r4, #16
 80003a6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003aa:	fb0e f003 	mul.w	r0, lr, r3
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x12c>
 80003b2:	eb1c 0505 	adds.w	r5, ip, r5
 80003b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x12a>
 80003bc:	42a8      	cmp	r0, r5
 80003be:	f200 80ce 	bhi.w	800055e <__udivmoddi4+0x2c6>
 80003c2:	4643      	mov	r3, r8
 80003c4:	1a2d      	subs	r5, r5, r0
 80003c6:	fbb5 f0f7 	udiv	r0, r5, r7
 80003ca:	fb07 5510 	mls	r5, r7, r0, r5
 80003ce:	fb0e fe00 	mul.w	lr, lr, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x156>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 35ff 	add.w	r5, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x154>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80b6 	bhi.w	8000558 <__udivmoddi4+0x2c0>
 80003ec:	4628      	mov	r0, r5
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f6:	e79e      	b.n	8000336 <__udivmoddi4+0x9e>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa25 fa07 	lsr.w	sl, r5, r7
 800040a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040e:	fbba f8f9 	udiv	r8, sl, r9
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	fb09 aa18 	mls	sl, r9, r8, sl
 800041a:	408d      	lsls	r5, r1
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	431d      	orrs	r5, r3
 8000422:	fa00 f301 	lsl.w	r3, r0, r1
 8000426:	fb08 f00e 	mul.w	r0, r8, lr
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000430:	42a0      	cmp	r0, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b8>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2bc>
 8000444:	42a0      	cmp	r0, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2bc>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1a24      	subs	r4, r4, r0
 8000452:	fbb4 f0f9 	udiv	r0, r4, r9
 8000456:	fb09 4410 	mls	r4, r9, r0, r4
 800045a:	fb00 fe0e 	mul.w	lr, r0, lr
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1e2>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2b4>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2b4>
 8000476:	3802      	subs	r0, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047e:	fba0 9502 	umull	r9, r5, r0, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x2a4>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x2a0>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2d0>
 8000494:	ebb3 0208 	subs.w	r2, r3, r8
 8000498:	eb64 040e 	sbc.w	r4, r4, lr
 800049c:	fa22 f301 	lsr.w	r3, r2, r1
 80004a0:	fa04 f707 	lsl.w	r7, r4, r7
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa8>
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	f1c2 0120 	rsb	r1, r2, #32
 80004b8:	fa25 f301 	lsr.w	r3, r5, r1
 80004bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c0:	fa20 f101 	lsr.w	r1, r0, r1
 80004c4:	4095      	lsls	r5, r2
 80004c6:	430d      	orrs	r5, r1
 80004c8:	fbb3 f1f7 	udiv	r1, r3, r7
 80004cc:	fb07 3311 	mls	r3, r7, r1, r3
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	0c28      	lsrs	r0, r5, #16
 80004d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004da:	fb01 f30e 	mul.w	r3, r1, lr
 80004de:	4283      	cmp	r3, r0
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x260>
 80004e6:	eb1c 0000 	adds.w	r0, ip, r0
 80004ea:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b8>
 80004f0:	4283      	cmp	r3, r0
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b8>
 80004f4:	3902      	subs	r1, #2
 80004f6:	4460      	add	r0, ip
 80004f8:	1ac0      	subs	r0, r0, r3
 80004fa:	fbb0 f3f7 	udiv	r3, r0, r7
 80004fe:	fb07 0013 	mls	r0, r7, r3, r0
 8000502:	b2ad      	uxth	r5, r5
 8000504:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000508:	fb03 f00e 	mul.w	r0, r3, lr
 800050c:	42a8      	cmp	r0, r5
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x28a>
 8000510:	eb1c 0505 	adds.w	r5, ip, r5
 8000514:	f103 38ff 	add.w	r8, r3, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2b0>
 800051a:	42a8      	cmp	r0, r5
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2b0>
 800051e:	3b02      	subs	r3, #2
 8000520:	4465      	add	r5, ip
 8000522:	1a28      	subs	r0, r5, r0
 8000524:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0x104>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e707      	b.n	8000340 <__udivmoddi4+0xa8>
 8000530:	462f      	mov	r7, r5
 8000532:	e6e4      	b.n	80002fe <__udivmoddi4+0x66>
 8000534:	4618      	mov	r0, r3
 8000536:	e6f9      	b.n	800032c <__udivmoddi4+0x94>
 8000538:	454b      	cmp	r3, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f8>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3801      	subs	r0, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f8>
 8000548:	4643      	mov	r3, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x28a>
 800054c:	4628      	mov	r0, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1e2>
 8000550:	4641      	mov	r1, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x260>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b8>
 8000558:	4464      	add	r4, ip
 800055a:	3802      	subs	r0, #2
 800055c:	e747      	b.n	80003ee <__udivmoddi4+0x156>
 800055e:	3b02      	subs	r3, #2
 8000560:	4465      	add	r5, ip
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x12c>
 8000564:	4608      	mov	r0, r1
 8000566:	e706      	b.n	8000376 <__udivmoddi4+0xde>
 8000568:	4631      	mov	r1, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa8>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b098      	sub	sp, #96	; 0x60
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fd23 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 fa3b 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fae7 	bl	8000b50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000582:	f000 fa85 	bl	8000a90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fab9 	bl	8000afc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   uint32_t pasos = 60000;
 800058a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
   uint8_t fwd = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   //uint8_t move = 0x64;

   double acc = 2008, dec = 2008, max_speed = 992, fs_spd = 15625;
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	4bc1      	ldr	r3, [pc, #772]	; (80008a0 <main+0x330>)
 800059c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	4bbe      	ldr	r3, [pc, #760]	; (80008a0 <main+0x330>)
 80005a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80005aa:	f04f 0200 	mov.w	r2, #0
 80005ae:	4bbd      	ldr	r3, [pc, #756]	; (80008a4 <main+0x334>)
 80005b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80005b4:	a3b8      	add	r3, pc, #736	; (adr r3, 8000898 <main+0x328>)
 80005b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   uint8_t min_speed = 0, tboost = 0, tcc = 0b00000101, tdt = 1;
 80005be:	2300      	movs	r3, #0
 80005c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80005ca:	2305      	movs	r3, #5
 80005cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80005d0:	2301      	movs	r3, #1
 80005d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   uint8_t tval_hold = 0x00, tval_run = 0x00, tval_acc = 0x00, tval_dec = 0x00; //Regulación de torque configurada en todos los casos a 7.8mV
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80005e2:	2300      	movs	r3, #0
 80005e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   uint8_t t_fast = 5;
 80005ee:	2305      	movs	r3, #5
 80005f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

   uint8_t ton_min = 3;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   uint8_t toff_min = 21;
 80005fa:	2315      	movs	r3, #21
 80005fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   uint8_t ocd_th = 0x08;
 8000600:	2308      	movs	r3, #8
 8000602:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

   uint8_t step_sel = 0b00000111;
 8000606:	2307      	movs	r3, #7
 8000608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   uint8_t sync_sel = 0b00000101<<4;
 800060c:	2350      	movs	r3, #80	; 0x50
 800060e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
   uint8_t step_mode = (0b10000000|sync_sel|0x08|step_sel);
 8000612:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800061a:	4313      	orrs	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000622:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   uint8_t el_pos = (step_mode | 0x00);
 8000626:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800062a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

   uint8_t overcurrent=0x01, shutdown=0x02, th_warning=0x04, uvlo=0x08, adc_uvlo=0x10, turn_on=0x40, w_nperf_cmd=0x80;
 800062e:	2301      	movs	r3, #1
 8000630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000634:	2302      	movs	r3, #2
 8000636:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800063a:	2304      	movs	r3, #4
 800063c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000640:	2308      	movs	r3, #8
 8000642:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000646:	2310      	movs	r3, #16
 8000648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800064c:	2340      	movs	r3, #64	; 0x40
 800064e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

   //Se pueden escoger que alarmas se activan o no, acá se activan todas.
   uint8_t alarm_en = (overcurrent | shutdown | th_warning | uvlo | adc_uvlo | turn_on | w_nperf_cmd);
 8000658:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800065c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000660:	4313      	orrs	r3, r2
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000668:	4313      	orrs	r3, r2
 800066a:	b2da      	uxtb	r2, r3
 800066c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000670:	4313      	orrs	r3, r2
 8000672:	b2da      	uxtb	r2, r3
 8000674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000678:	4313      	orrs	r3, r2
 800067a:	b2da      	uxtb	r2, r3
 800067c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000680:	4313      	orrs	r3, r2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000688:	4313      	orrs	r3, r2
 800068a:	f887 3020 	strb.w	r3, [r7, #32]

   uint8_t wd_en = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	77fb      	strb	r3, [r7, #31]
   uint8_t igate = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	77bb      	strb	r3, [r7, #30]
   uint16_t gatecfg1 = (tcc|igate<<5|tboost<<8|wd_en<<11);
 8000696:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800069a:	b21a      	sxth	r2, r3
 800069c:	7fbb      	ldrb	r3, [r7, #30]
 800069e:	015b      	lsls	r3, r3, #5
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	02db      	lsls	r3, r3, #11
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	83bb      	strh	r3, [r7, #28]
   uint8_t gatecfg2 = (tdt|0b00000001<<5);
 80006be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	76fb      	strb	r3, [r7, #27]


   uint16_t osc_sel = 0x0000;
 80006c8:	2300      	movs	r3, #0
 80006ca:	833b      	strh	r3, [r7, #24]
   uint16_t ext_clk = 0b00000000;
 80006cc:	2300      	movs	r3, #0
 80006ce:	82fb      	strh	r3, [r7, #22]
   uint16_t sw_mode = 0b00010000;
 80006d0:	2310      	movs	r3, #16
 80006d2:	82bb      	strh	r3, [r7, #20]
   uint16_t oc_sd = 0x0000; //Para el motor ante una detección de sobre corriente. 0x0000 para deshabilitarlo.
 80006d4:	2300      	movs	r3, #0
 80006d6:	827b      	strh	r3, [r7, #18]
   uint16_t vcc_val= 0x0300;
 80006d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006dc:	823b      	strh	r3, [r7, #16]
   uint16_t uvloval = 0x0100;
 80006de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e2:	81fb      	strh	r3, [r7, #14]
   uint16_t tq_reg = 0x0000;
 80006e4:	2300      	movs	r3, #0
 80006e6:	81bb      	strh	r3, [r7, #12]
   uint16_t tsw = 0x02<<10;
 80006e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ec:	817b      	strh	r3, [r7, #10]
   uint16_t pred_en = 0b1000000000000000;
 80006ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f2:	813b      	strh	r3, [r7, #8]
   uint16_t config = (osc_sel | \
 80006f4:	8b3a      	ldrh	r2, [r7, #24]
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	8abb      	ldrh	r3, [r7, #20]
 80006fe:	4313      	orrs	r3, r2
 8000700:	b29a      	uxth	r2, r3
 8000702:	8a3b      	ldrh	r3, [r7, #16]
 8000704:	4313      	orrs	r3, r2
 8000706:	b29a      	uxth	r2, r3
 8000708:	8a7b      	ldrh	r3, [r7, #18]
 800070a:	4313      	orrs	r3, r2
 800070c:	b29a      	uxth	r2, r3
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	4313      	orrs	r3, r2
 8000712:	b29a      	uxth	r2, r3
 8000714:	89bb      	ldrh	r3, [r7, #12]
 8000716:	4313      	orrs	r3, r2
 8000718:	b29a      	uxth	r2, r3
 800071a:	897b      	ldrh	r3, [r7, #10]
 800071c:	4313      	orrs	r3, r2
 800071e:	b29a      	uxth	r2, r3
 8000720:	893b      	ldrh	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
 8000724:	80fb      	strh	r3, [r7, #6]
  // uint8_t estado_spi_tx;

   //Configuraciones de los modos básicos en los registros:

   // 1. Posición absoluta:
   param[0] = 0x01;
 8000726:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <main+0x338>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
   value[0] = 0x00;
 800072c:	4b5f      	ldr	r3, [pc, #380]	; (80008ac <main+0x33c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1,1);
 8000732:	2301      	movs	r3, #1
 8000734:	2201      	movs	r2, #1
 8000736:	495d      	ldr	r1, [pc, #372]	; (80008ac <main+0x33c>)
 8000738:	485b      	ldr	r0, [pc, #364]	; (80008a8 <main+0x338>)
 800073a:	f000 fa97 	bl	8000c6c <enviar>

   // 2. Posición electrica:
   param[0] = (0x00|0x02);
 800073e:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <main+0x338>)
 8000740:	2202      	movs	r2, #2
 8000742:	701a      	strb	r2, [r3, #0]
   value[0] = el_pos;
 8000744:	4a59      	ldr	r2, [pc, #356]	; (80008ac <main+0x33c>)
 8000746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800074a:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 800074c:	2301      	movs	r3, #1
 800074e:	2201      	movs	r2, #1
 8000750:	4956      	ldr	r1, [pc, #344]	; (80008ac <main+0x33c>)
 8000752:	4855      	ldr	r0, [pc, #340]	; (80008a8 <main+0x338>)
 8000754:	f000 fa8a 	bl	8000c6c <enviar>

   // 3. Marca
   param[0] = 0x03;
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <main+0x338>)
 800075a:	2203      	movs	r2, #3
 800075c:	701a      	strb	r2, [r3, #0]
   value[3] = 0x00>>16;
 800075e:	4b53      	ldr	r3, [pc, #332]	; (80008ac <main+0x33c>)
 8000760:	2200      	movs	r2, #0
 8000762:	70da      	strb	r2, [r3, #3]
   enviar (param, value, 1, 1);
 8000764:	2301      	movs	r3, #1
 8000766:	2201      	movs	r2, #1
 8000768:	4950      	ldr	r1, [pc, #320]	; (80008ac <main+0x33c>)
 800076a:	484f      	ldr	r0, [pc, #316]	; (80008a8 <main+0x338>)
 800076c:	f000 fa7e 	bl	8000c6c <enviar>

   // 4. Aceleración
   param[0] = 0x05;
 8000770:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <main+0x338>)
 8000772:	2205      	movs	r2, #5
 8000774:	701a      	strb	r2, [r3, #0]
   value[0] = acc;
 8000776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800077a:	f7ff fd55 	bl	8000228 <__aeabi_d2uiz>
 800077e:	4603      	mov	r3, r0
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b4a      	ldr	r3, [pc, #296]	; (80008ac <main+0x33c>)
 8000784:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1, 2);
 8000786:	2302      	movs	r3, #2
 8000788:	2201      	movs	r2, #1
 800078a:	4948      	ldr	r1, [pc, #288]	; (80008ac <main+0x33c>)
 800078c:	4846      	ldr	r0, [pc, #280]	; (80008a8 <main+0x338>)
 800078e:	f000 fa6d 	bl	8000c6c <enviar>

   // 5. Desaceleración
   param[0] = 0x06;
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <main+0x338>)
 8000794:	2206      	movs	r2, #6
 8000796:	701a      	strb	r2, [r3, #0]
   value[0] = dec;
 8000798:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800079c:	f7ff fd44 	bl	8000228 <__aeabi_d2uiz>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <main+0x33c>)
 80007a6:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1, 2);
 80007a8:	2302      	movs	r3, #2
 80007aa:	2201      	movs	r2, #1
 80007ac:	493f      	ldr	r1, [pc, #252]	; (80008ac <main+0x33c>)
 80007ae:	483e      	ldr	r0, [pc, #248]	; (80008a8 <main+0x338>)
 80007b0:	f000 fa5c 	bl	8000c6c <enviar>

   // 6. Velocidad mínima
   param[0] = 0x07;
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <main+0x338>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	701a      	strb	r2, [r3, #0]
   value[0] = min_speed;
 80007ba:	4a3c      	ldr	r2, [pc, #240]	; (80008ac <main+0x33c>)
 80007bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007c0:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 80007c2:	2301      	movs	r3, #1
 80007c4:	2201      	movs	r2, #1
 80007c6:	4939      	ldr	r1, [pc, #228]	; (80008ac <main+0x33c>)
 80007c8:	4837      	ldr	r0, [pc, #220]	; (80008a8 <main+0x338>)
 80007ca:	f000 fa4f 	bl	8000c6c <enviar>

   // 7. Vel máxima
   param[0] = 0x08;
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <main+0x338>)
 80007d0:	2208      	movs	r2, #8
 80007d2:	701a      	strb	r2, [r3, #0]
   value[0] = max_speed;
 80007d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80007d8:	f7ff fd26 	bl	8000228 <__aeabi_d2uiz>
 80007dc:	4603      	mov	r3, r0
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <main+0x33c>)
 80007e2:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1, 2);
 80007e4:	2302      	movs	r3, #2
 80007e6:	2201      	movs	r2, #1
 80007e8:	4930      	ldr	r1, [pc, #192]	; (80008ac <main+0x33c>)
 80007ea:	482f      	ldr	r0, [pc, #188]	; (80008a8 <main+0x338>)
 80007ec:	f000 fa3e 	bl	8000c6c <enviar>

   // 8. Full-step speed
   param[0] = 0x15;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <main+0x338>)
 80007f2:	2215      	movs	r2, #21
 80007f4:	701a      	strb	r2, [r3, #0]
   value[0] = fs_spd;
 80007f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80007fa:	f7ff fd15 	bl	8000228 <__aeabi_d2uiz>
 80007fe:	4603      	mov	r3, r0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <main+0x33c>)
 8000804:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1, 2);
 8000806:	2302      	movs	r3, #2
 8000808:	2201      	movs	r2, #1
 800080a:	4928      	ldr	r1, [pc, #160]	; (80008ac <main+0x33c>)
 800080c:	4826      	ldr	r0, [pc, #152]	; (80008a8 <main+0x338>)
 800080e:	f000 fa2d 	bl	8000c6c <enviar>

   // 9. T_VALs
   param[0] = 0x09;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <main+0x338>)
 8000814:	2209      	movs	r2, #9
 8000816:	701a      	strb	r2, [r3, #0]
   value[0] = tval_hold;
 8000818:	4a24      	ldr	r2, [pc, #144]	; (80008ac <main+0x33c>)
 800081a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081e:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 8000820:	2301      	movs	r3, #1
 8000822:	2201      	movs	r2, #1
 8000824:	4921      	ldr	r1, [pc, #132]	; (80008ac <main+0x33c>)
 8000826:	4820      	ldr	r0, [pc, #128]	; (80008a8 <main+0x338>)
 8000828:	f000 fa20 	bl	8000c6c <enviar>

   param[0] = 0x0A;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <main+0x338>)
 800082e:	220a      	movs	r2, #10
 8000830:	701a      	strb	r2, [r3, #0]
   value[0] = tval_run;
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <main+0x33c>)
 8000834:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000838:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 800083a:	2301      	movs	r3, #1
 800083c:	2201      	movs	r2, #1
 800083e:	491b      	ldr	r1, [pc, #108]	; (80008ac <main+0x33c>)
 8000840:	4819      	ldr	r0, [pc, #100]	; (80008a8 <main+0x338>)
 8000842:	f000 fa13 	bl	8000c6c <enviar>

   param[0] = 0x0B;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <main+0x338>)
 8000848:	220b      	movs	r2, #11
 800084a:	701a      	strb	r2, [r3, #0]
   value[0] = tval_acc;
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <main+0x33c>)
 800084e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000852:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 8000854:	2301      	movs	r3, #1
 8000856:	2201      	movs	r2, #1
 8000858:	4914      	ldr	r1, [pc, #80]	; (80008ac <main+0x33c>)
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <main+0x338>)
 800085c:	f000 fa06 	bl	8000c6c <enviar>

   param[0] = 0x0C;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <main+0x338>)
 8000862:	220c      	movs	r2, #12
 8000864:	701a      	strb	r2, [r3, #0]
   value[0] = tval_dec;
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <main+0x33c>)
 8000868:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800086c:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 800086e:	2301      	movs	r3, #1
 8000870:	2201      	movs	r2, #1
 8000872:	490e      	ldr	r1, [pc, #56]	; (80008ac <main+0x33c>)
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <main+0x338>)
 8000876:	f000 f9f9 	bl	8000c6c <enviar>

   // 10. Maximum fast decay time (TOFF_FAST) and the maximum fall step time (FALL_STEP) used by the current control system
   param[0] = 0x0E;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <main+0x338>)
 800087c:	220e      	movs	r2, #14
 800087e:	701a      	strb	r2, [r3, #0]
   value[0] = t_fast;
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <main+0x33c>)
 8000882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000886:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 8000888:	2301      	movs	r3, #1
 800088a:	2201      	movs	r2, #1
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <main+0x33c>)
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <main+0x338>)
 8000890:	f000 f9ec 	bl	8000c6c <enviar>
 8000894:	e00c      	b.n	80008b0 <main+0x340>
 8000896:	bf00      	nop
 8000898:	00000000 	.word	0x00000000
 800089c:	40ce8480 	.word	0x40ce8480
 80008a0:	409f6000 	.word	0x409f6000
 80008a4:	408f0000 	.word	0x408f0000
 80008a8:	200000d4 	.word	0x200000d4
 80008ac:	200000d8 	.word	0x200000d8

   // 11. Mínimo tiempo encendido, en ambos casos se configura con el máximo permitido.
   param[0] = 0x0F;
 80008b0:	4b4d      	ldr	r3, [pc, #308]	; (80009e8 <main+0x478>)
 80008b2:	220f      	movs	r2, #15
 80008b4:	701a      	strb	r2, [r3, #0]
   value[0] = ton_min;
 80008b6:	4a4d      	ldr	r2, [pc, #308]	; (80009ec <main+0x47c>)
 80008b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008bc:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 80008be:	2301      	movs	r3, #1
 80008c0:	2201      	movs	r2, #1
 80008c2:	494a      	ldr	r1, [pc, #296]	; (80009ec <main+0x47c>)
 80008c4:	4848      	ldr	r0, [pc, #288]	; (80009e8 <main+0x478>)
 80008c6:	f000 f9d1 	bl	8000c6c <enviar>

   // 12. Mínimo tiempo apagado
   param[0] = 0x10;
 80008ca:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <main+0x478>)
 80008cc:	2210      	movs	r2, #16
 80008ce:	701a      	strb	r2, [r3, #0]
   value[0] = toff_min;
 80008d0:	4a46      	ldr	r2, [pc, #280]	; (80009ec <main+0x47c>)
 80008d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80008d6:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 80008d8:	2301      	movs	r3, #1
 80008da:	2201      	movs	r2, #1
 80008dc:	4943      	ldr	r1, [pc, #268]	; (80009ec <main+0x47c>)
 80008de:	4842      	ldr	r0, [pc, #264]	; (80009e8 <main+0x478>)
 80008e0:	f000 f9c4 	bl	8000c6c <enviar>

   // 13. Valor de umbral de sobre corriente
   param[0] = 0x13;
 80008e4:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <main+0x478>)
 80008e6:	2213      	movs	r2, #19
 80008e8:	701a      	strb	r2, [r3, #0]
   value[0] = ocd_th;
 80008ea:	4a40      	ldr	r2, [pc, #256]	; (80009ec <main+0x47c>)
 80008ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008f0:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 80008f2:	2301      	movs	r3, #1
 80008f4:	2201      	movs	r2, #1
 80008f6:	493d      	ldr	r1, [pc, #244]	; (80009ec <main+0x47c>)
 80008f8:	483b      	ldr	r0, [pc, #236]	; (80009e8 <main+0x478>)
 80008fa:	f000 f9b7 	bl	8000c6c <enviar>

   // 14. Step mode
    param[0] = 0x16;
 80008fe:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <main+0x478>)
 8000900:	2216      	movs	r2, #22
 8000902:	701a      	strb	r2, [r3, #0]
    value[0] = step_mode;
 8000904:	4a39      	ldr	r2, [pc, #228]	; (80009ec <main+0x47c>)
 8000906:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800090a:	7013      	strb	r3, [r2, #0]
    enviar (param, value, 1, 1);
 800090c:	2301      	movs	r3, #1
 800090e:	2201      	movs	r2, #1
 8000910:	4936      	ldr	r1, [pc, #216]	; (80009ec <main+0x47c>)
 8000912:	4835      	ldr	r0, [pc, #212]	; (80009e8 <main+0x478>)
 8000914:	f000 f9aa 	bl	8000c6c <enviar>

    // 15. Habilitación de alarmas
    param[0] = 0x17;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <main+0x478>)
 800091a:	2217      	movs	r2, #23
 800091c:	701a      	strb	r2, [r3, #0]
    value[0] = alarm_en;
 800091e:	4a33      	ldr	r2, [pc, #204]	; (80009ec <main+0x47c>)
 8000920:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000924:	7013      	strb	r3, [r2, #0]
    enviar (param, value, 1, 1);
 8000926:	2301      	movs	r3, #1
 8000928:	2201      	movs	r2, #1
 800092a:	4930      	ldr	r1, [pc, #192]	; (80009ec <main+0x47c>)
 800092c:	482e      	ldr	r0, [pc, #184]	; (80009e8 <main+0x478>)
 800092e:	f000 f99d 	bl	8000c6c <enviar>

   // 16. GATECFG1
   param[0] = 0x18;
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <main+0x478>)
 8000934:	2218      	movs	r2, #24
 8000936:	701a      	strb	r2, [r3, #0]
   value[0] = gatecfg1;
 8000938:	8bbb      	ldrh	r3, [r7, #28]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x47c>)
 800093e:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1, 2);
 8000940:	2302      	movs	r3, #2
 8000942:	2201      	movs	r2, #1
 8000944:	4929      	ldr	r1, [pc, #164]	; (80009ec <main+0x47c>)
 8000946:	4828      	ldr	r0, [pc, #160]	; (80009e8 <main+0x478>)
 8000948:	f000 f990 	bl	8000c6c <enviar>

   // 17. GATECFG2
   param[0] = 0x19;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <main+0x478>)
 800094e:	2219      	movs	r2, #25
 8000950:	701a      	strb	r2, [r3, #0]
   value[0] = gatecfg2;
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <main+0x47c>)
 8000954:	7efb      	ldrb	r3, [r7, #27]
 8000956:	7013      	strb	r3, [r2, #0]
   enviar (param, value, 1, 1);
 8000958:	2301      	movs	r3, #1
 800095a:	2201      	movs	r2, #1
 800095c:	4923      	ldr	r1, [pc, #140]	; (80009ec <main+0x47c>)
 800095e:	4822      	ldr	r0, [pc, #136]	; (80009e8 <main+0x478>)
 8000960:	f000 f984 	bl	8000c6c <enviar>

   // 18. Config
   param[0] = 0x1A;
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <main+0x478>)
 8000966:	221a      	movs	r2, #26
 8000968:	701a      	strb	r2, [r3, #0]
   value[0] = config;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x47c>)
 8000970:	701a      	strb	r2, [r3, #0]
   enviar (param, value, 1, 2);
 8000972:	2302      	movs	r3, #2
 8000974:	2201      	movs	r2, #1
 8000976:	491d      	ldr	r1, [pc, #116]	; (80009ec <main+0x47c>)
 8000978:	481b      	ldr	r0, [pc, #108]	; (80009e8 <main+0x478>)
 800097a:	f000 f977 	bl	8000c6c <enviar>

   while (1)
   {

	  uint8_t direction[1] = {0};
 800097e:	2300      	movs	r3, #0
 8000980:	713b      	strb	r3, [r7, #4]
	  uint8_t speed[3] = {0};
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <main+0x480>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	803b      	strh	r3, [r7, #0]
 8000988:	2300      	movs	r3, #0
 800098a:	70bb      	strb	r3, [r7, #2]

	  direction [0] = (0x68 | fwd);
 800098c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000990:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000994:	b2db      	uxtb	r3, r3
 8000996:	713b      	strb	r3, [r7, #4]
 	  speed [0] = pasos >> 16;
 8000998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800099a:	0c1b      	lsrs	r3, r3, #16
 800099c:	b2db      	uxtb	r3, r3
 800099e:	703b      	strb	r3, [r7, #0]
 	  speed [1] = pasos >> 8;
 80009a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	707b      	strb	r3, [r7, #1]
 	  speed [2] = pasos;
 80009a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	70bb      	strb	r3, [r7, #2]

 	  enviar (direction, speed, 1, 3);
 80009ae:	4639      	mov	r1, r7
 80009b0:	1d38      	adds	r0, r7, #4
 80009b2:	2303      	movs	r3, #3
 80009b4:	2201      	movs	r2, #1
 80009b6:	f000 f959 	bl	8000c6c <enviar>


 	  //GetParam Registro Config
 	   param[0] = (0b00100000 | 0x1A);
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <main+0x478>)
 80009bc:	223a      	movs	r2, #58	; 0x3a
 80009be:	701a      	strb	r2, [r3, #0]
 	   value[0] = config;
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x47c>)
 80009c6:	701a      	strb	r2, [r3, #0]
 	   enviar (param, value, 1, 2);
 80009c8:	2302      	movs	r3, #2
 80009ca:	2201      	movs	r2, #1
 80009cc:	4907      	ldr	r1, [pc, #28]	; (80009ec <main+0x47c>)
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <main+0x478>)
 80009d0:	f000 f94c 	bl	8000c6c <enviar>
 	   recibir ();
 80009d4:	f000 f976 	bl	8000cc4 <recibir>
 	   HAL_Delay(400);
 80009d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009dc:	f000 fb52 	bl	8001084 <HAL_Delay>
 	   get_status();
 80009e0:	f000 f992 	bl	8000d08 <get_status>
   {
 80009e4:	e7cb      	b.n	800097e <main+0x40e>
 80009e6:	bf00      	nop
 80009e8:	200000d4 	.word	0x200000d4
 80009ec:	200000d8 	.word	0x200000d8
 80009f0:	080031fc 	.word	0x080031fc

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	; 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	2238      	movs	r2, #56	; 0x38
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fbe6 	bl	80031d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fef3 	bl	8001830 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000a50:	f000 f982 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f9f4 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a7a:	f000 f96d 	bl	8000d58 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000a7e:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <SystemClock_Config+0x98>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	3750      	adds	r7, #80	; 0x50
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	42420070 	.word	0x42420070

08000a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000ac4:	2218      	movs	r2, #24
 8000ac6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_SPI1_Init+0x64>)
 8000ae2:	f001 fbe9 	bl	80022b8 <HAL_SPI_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aec:	f000 f934 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000028 	.word	0x20000028
 8000af8:	40013000 	.word	0x40013000

08000afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART1_UART_Init+0x4c>)
 8000b34:	f002 fa4c 	bl	8002fd0 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 f90b 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000080 	.word	0x20000080
 8000b4c:	40013800 	.word	0x40013800

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a3c      	ldr	r2, [pc, #240]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b6a:	f043 0320 	orr.w	r3, r3, #32
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0320 	and.w	r3, r3, #32
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SPARE_Pin|LED_ERROR_Pin|LED_BUSY_Pin|LED_READY_Pin
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	213f      	movs	r1, #63	; 0x3f
 8000bc8:	4825      	ldr	r0, [pc, #148]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bca:	f000 fe19 	bl	8001800 <HAL_GPIO_WritePin>
                          |SW_Pin|STBY_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STCK_Pin|CS_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2118      	movs	r1, #24
 8000bd2:	4824      	ldr	r0, [pc, #144]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000bd4:	f000 fe14 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLAG_Pin|BUSY_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_GPIO_Init+0x118>)
 8000be0:	f000 fe0e 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SPARE_Pin LED_ERROR_Pin LED_BUSY_Pin LED_READY_Pin
                           SW_Pin STBY_RESET_Pin */
  GPIO_InitStruct.Pin = LED_SPARE_Pin|LED_ERROR_Pin|LED_BUSY_Pin|LED_READY_Pin
 8000be4:	233f      	movs	r3, #63	; 0x3f
 8000be6:	613b      	str	r3, [r7, #16]
                          |SW_Pin|STBY_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bfc:	f000 fc7c 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8000c00:	2306      	movs	r3, #6
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000c14:	f000 fc70 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STCK_Pin CS_Pin */
  GPIO_InitStruct.Pin = STCK_Pin|CS_Pin;
 8000c18:	2318      	movs	r3, #24
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000c30:	f000 fc62 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLAG_Pin BUSY_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin|BUSY_Pin;
 8000c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_GPIO_Init+0x118>)
 8000c4e:	f000 fc53 	bl	80014f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40011000 	.word	0x40011000
 8000c64:	40010800 	.word	0x40010800
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <enviar>:

/* USER CODE BEGIN 4 */

void enviar (uint8_t* param, uint8_t* value, uint16_t nbp, uint16_t nbv)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	4611      	mov	r1, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	80bb      	strh	r3, [r7, #4]
	   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <enviar+0x50>)
 8000c88:	f000 fdba 	bl	8001800 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, (uint8_t*) param, nbp, 500);
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <enviar+0x54>)
 8000c96:	f001 fb93 	bl	80023c0 <HAL_SPI_Transmit>
	   HAL_SPI_Transmit(&hspi1, (uint8_t*) value, nbv, 500);
 8000c9a:	88ba      	ldrh	r2, [r7, #4]
 8000c9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <enviar+0x54>)
 8000ca4:	f001 fb8c 	bl	80023c0 <HAL_SPI_Transmit>
	   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2110      	movs	r1, #16
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <enviar+0x50>)
 8000cae:	f000 fda7 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	20000028 	.word	0x20000028

08000cc4 <recibir>:
uint8_t* recibir ()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2110      	movs	r1, #16
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <recibir+0x34>)
 8000cce:	f000 fd97 	bl	8001800 <HAL_GPIO_WritePin>
	estado_rx = HAL_SPI_Receive(&hspi1, rx_buffer, 3, 500);
 8000cd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4908      	ldr	r1, [pc, #32]	; (8000cfc <recibir+0x38>)
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <recibir+0x3c>)
 8000cdc:	f001 fcb3 	bl	8002646 <HAL_SPI_Receive>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <recibir+0x40>)
 8000ce6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <recibir+0x34>)
 8000cee:	f000 fd87 	bl	8001800 <HAL_GPIO_WritePin>
	return (uint8_t*) rx_buffer;
 8000cf2:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <recibir+0x38>)
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	200000cc 	.word	0x200000cc
 8000d00:	20000028 	.word	0x20000028
 8000d04:	200000c8 	.word	0x200000c8

08000d08 <get_status>:

uint8_t* get_status()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	get_st[0] = 0b11010000;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <get_status+0x3c>)
 8000d0e:	22d0      	movs	r2, #208	; 0xd0
 8000d10:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <get_status+0x40>)
 8000d18:	f000 fd72 	bl	8001800 <HAL_GPIO_WritePin>
	estado_rx = HAL_SPI_Receive(&hspi1, rx_buffer, 3, 500);
 8000d1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d20:	2203      	movs	r2, #3
 8000d22:	490a      	ldr	r1, [pc, #40]	; (8000d4c <get_status+0x44>)
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <get_status+0x48>)
 8000d26:	f001 fc8e 	bl	8002646 <HAL_SPI_Receive>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <get_status+0x4c>)
 8000d30:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2110      	movs	r1, #16
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <get_status+0x40>)
 8000d38:	f000 fd62 	bl	8001800 <HAL_GPIO_WritePin>
	return (uint8_t*) rx_buffer;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <get_status+0x44>)
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000d0 	.word	0x200000d0
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	200000cc 	.word	0x200000cc
 8000d50:	20000028 	.word	0x20000028
 8000d54:	200000c8 	.word	0x200000c8

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x60>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_MspInit+0x60>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_SPI_MspInit+0x98>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d137      	bne.n	8000e58 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_SPI_MspInit+0x9c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_SPI_MspInit+0x9c>)
 8000dee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_SPI_MspInit+0x9c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_SPI_MspInit+0x9c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x9c>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_SPI_MspInit+0x9c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e18:	23a0      	movs	r3, #160	; 0xa0
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480f      	ldr	r0, [pc, #60]	; (8000e68 <HAL_SPI_MspInit+0xa0>)
 8000e2c:	f000 fb64 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e30:	2340      	movs	r3, #64	; 0x40
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_SPI_MspInit+0xa0>)
 8000e44:	f000 fb58 	bl	80014f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2023      	movs	r0, #35	; 0x23
 8000e4e:	f000 fa14 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e52:	2023      	movs	r0, #35	; 0x23
 8000e54:	f000 fa2d 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40013000 	.word	0x40013000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_UART_MspInit+0x8c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d131      	bne.n	8000ef0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_UART_MspInit+0x90>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_UART_MspInit+0x90>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_UART_MspInit+0x90>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_MspInit+0x90>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_UART_MspInit+0x90>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_UART_MspInit+0x90>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HAL_UART_MspInit+0x94>)
 8000ed2:	f000 fb11 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_UART_MspInit+0x94>)
 8000eec:	f000 fb04 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f87f 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <SPI1_IRQHandler+0x10>)
 8000f5a:	f001 fe3d 	bl	8002bd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000028 	.word	0x20000028

08000f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff fff8 	bl	8000f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f7a:	490c      	ldr	r1, [pc, #48]	; (8000fac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f90:	4c09      	ldr	r4, [pc, #36]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f002 f8f5 	bl	800318c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff fae5 	bl	8000570 <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb0:	08003248 	.word	0x08003248
  ldr r2, =_sbss
 8000fb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb8:	200000e0 	.word	0x200000e0

08000fbc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f947 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fec2 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f95f 	bl	80012ce <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f927 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <HAL_IncTick+0x20>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000008 	.word	0x20000008
 800106c:	200000dc 	.word	0x200000dc

08001070 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	200000dc 	.word	0x200000dc

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff fff0 	bl	8001070 <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffe0 	bl	8001070 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4906      	ldr	r1, [pc, #24]	; (8001164 <__NVIC_EnableIRQ+0x34>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff90 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff2d 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff42 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff35 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d005      	beq.n	800130c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2204      	movs	r2, #4
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e0d6      	b.n	80014ba <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 020e 	bic.w	r2, r2, #14
 800131a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b64      	ldr	r3, [pc, #400]	; (80014c4 <HAL_DMA_Abort_IT+0x1dc>)
 8001334:	429a      	cmp	r2, r3
 8001336:	d958      	bls.n	80013ea <HAL_DMA_Abort_IT+0x102>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a62      	ldr	r2, [pc, #392]	; (80014c8 <HAL_DMA_Abort_IT+0x1e0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d04f      	beq.n	80013e2 <HAL_DMA_Abort_IT+0xfa>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a61      	ldr	r2, [pc, #388]	; (80014cc <HAL_DMA_Abort_IT+0x1e4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d048      	beq.n	80013de <HAL_DMA_Abort_IT+0xf6>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <HAL_DMA_Abort_IT+0x1e8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d040      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xf0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5e      	ldr	r2, [pc, #376]	; (80014d4 <HAL_DMA_Abort_IT+0x1ec>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d038      	beq.n	80013d2 <HAL_DMA_Abort_IT+0xea>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <HAL_DMA_Abort_IT+0x1f0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d030      	beq.n	80013cc <HAL_DMA_Abort_IT+0xe4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5b      	ldr	r2, [pc, #364]	; (80014dc <HAL_DMA_Abort_IT+0x1f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d028      	beq.n	80013c6 <HAL_DMA_Abort_IT+0xde>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_DMA_Abort_IT+0x1dc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d020      	beq.n	80013c0 <HAL_DMA_Abort_IT+0xd8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_DMA_Abort_IT+0x1f8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d019      	beq.n	80013bc <HAL_DMA_Abort_IT+0xd4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a55      	ldr	r2, [pc, #340]	; (80014e4 <HAL_DMA_Abort_IT+0x1fc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d012      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xd0>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_DMA_Abort_IT+0x200>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00a      	beq.n	80013b2 <HAL_DMA_Abort_IT+0xca>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_DMA_Abort_IT+0x204>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d102      	bne.n	80013ac <HAL_DMA_Abort_IT+0xc4>
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	e01b      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	e018      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	e015      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013b8:	2310      	movs	r3, #16
 80013ba:	e013      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013bc:	2301      	movs	r3, #1
 80013be:	e011      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c4:	e00e      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ca:	e00b      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	e008      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	e005      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	e002      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013de:	2310      	movs	r3, #16
 80013e0:	e000      	b.n	80013e4 <HAL_DMA_Abort_IT+0xfc>
 80013e2:	2301      	movs	r3, #1
 80013e4:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_DMA_Abort_IT+0x208>)
 80013e6:	6053      	str	r3, [r2, #4]
 80013e8:	e057      	b.n	800149a <HAL_DMA_Abort_IT+0x1b2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a36      	ldr	r2, [pc, #216]	; (80014c8 <HAL_DMA_Abort_IT+0x1e0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d04f      	beq.n	8001494 <HAL_DMA_Abort_IT+0x1ac>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a34      	ldr	r2, [pc, #208]	; (80014cc <HAL_DMA_Abort_IT+0x1e4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d048      	beq.n	8001490 <HAL_DMA_Abort_IT+0x1a8>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <HAL_DMA_Abort_IT+0x1e8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d040      	beq.n	800148a <HAL_DMA_Abort_IT+0x1a2>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <HAL_DMA_Abort_IT+0x1ec>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d038      	beq.n	8001484 <HAL_DMA_Abort_IT+0x19c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <HAL_DMA_Abort_IT+0x1f0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d030      	beq.n	800147e <HAL_DMA_Abort_IT+0x196>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <HAL_DMA_Abort_IT+0x1f4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d028      	beq.n	8001478 <HAL_DMA_Abort_IT+0x190>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <HAL_DMA_Abort_IT+0x1dc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d020      	beq.n	8001472 <HAL_DMA_Abort_IT+0x18a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <HAL_DMA_Abort_IT+0x1f8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_DMA_Abort_IT+0x186>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_DMA_Abort_IT+0x1fc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d012      	beq.n	800146a <HAL_DMA_Abort_IT+0x182>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <HAL_DMA_Abort_IT+0x200>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00a      	beq.n	8001464 <HAL_DMA_Abort_IT+0x17c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <HAL_DMA_Abort_IT+0x204>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d102      	bne.n	800145e <HAL_DMA_Abort_IT+0x176>
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	e01b      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 800145e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001462:	e018      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 8001464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001468:	e015      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 800146a:	2310      	movs	r3, #16
 800146c:	e013      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 800146e:	2301      	movs	r3, #1
 8001470:	e011      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 8001472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001476:	e00e      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 8001478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800147c:	e00b      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 800147e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001482:	e008      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	e005      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 800148a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148e:	e002      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 8001490:	2310      	movs	r3, #16
 8001492:	e000      	b.n	8001496 <HAL_DMA_Abort_IT+0x1ae>
 8001494:	2301      	movs	r3, #1
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_DMA_Abort_IT+0x20c>)
 8001498:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
    } 
  }
  return status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40020080 	.word	0x40020080
 80014c8:	40020008 	.word	0x40020008
 80014cc:	4002001c 	.word	0x4002001c
 80014d0:	40020030 	.word	0x40020030
 80014d4:	40020044 	.word	0x40020044
 80014d8:	40020058 	.word	0x40020058
 80014dc:	4002006c 	.word	0x4002006c
 80014e0:	40020408 	.word	0x40020408
 80014e4:	4002041c 	.word	0x4002041c
 80014e8:	40020430 	.word	0x40020430
 80014ec:	40020444 	.word	0x40020444
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e169      	b.n	80017e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800150c:	2201      	movs	r2, #1
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8158 	bne.w	80017da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a9a      	ldr	r2, [pc, #616]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d05e      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001534:	4a98      	ldr	r2, [pc, #608]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d875      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 800153a:	4a98      	ldr	r2, [pc, #608]	; (800179c <HAL_GPIO_Init+0x2a4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d058      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001540:	4a96      	ldr	r2, [pc, #600]	; (800179c <HAL_GPIO_Init+0x2a4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d86f      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 8001546:	4a96      	ldr	r2, [pc, #600]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d052      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 800154c:	4a94      	ldr	r2, [pc, #592]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d869      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 8001552:	4a94      	ldr	r2, [pc, #592]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d04c      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001558:	4a92      	ldr	r2, [pc, #584]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d863      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 800155e:	4a92      	ldr	r2, [pc, #584]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d046      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001564:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d85d      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 800156a:	2b12      	cmp	r3, #18
 800156c:	d82a      	bhi.n	80015c4 <HAL_GPIO_Init+0xcc>
 800156e:	2b12      	cmp	r3, #18
 8001570:	d859      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_GPIO_Init+0x80>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	080015f3 	.word	0x080015f3
 800157c:	080015cd 	.word	0x080015cd
 8001580:	080015df 	.word	0x080015df
 8001584:	08001621 	.word	0x08001621
 8001588:	08001627 	.word	0x08001627
 800158c:	08001627 	.word	0x08001627
 8001590:	08001627 	.word	0x08001627
 8001594:	08001627 	.word	0x08001627
 8001598:	08001627 	.word	0x08001627
 800159c:	08001627 	.word	0x08001627
 80015a0:	08001627 	.word	0x08001627
 80015a4:	08001627 	.word	0x08001627
 80015a8:	08001627 	.word	0x08001627
 80015ac:	08001627 	.word	0x08001627
 80015b0:	08001627 	.word	0x08001627
 80015b4:	08001627 	.word	0x08001627
 80015b8:	08001627 	.word	0x08001627
 80015bc:	080015d5 	.word	0x080015d5
 80015c0:	080015e9 	.word	0x080015e9
 80015c4:	4a79      	ldr	r2, [pc, #484]	; (80017ac <HAL_GPIO_Init+0x2b4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ca:	e02c      	b.n	8001626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e029      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	3304      	adds	r3, #4
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	e024      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	3308      	adds	r3, #8
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e01f      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	330c      	adds	r3, #12
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e01a      	b.n	8001628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fa:	2304      	movs	r3, #4
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e013      	b.n	8001628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001608:	2308      	movs	r3, #8
 800160a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	611a      	str	r2, [r3, #16]
          break;
 8001612:	e009      	b.n	8001628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	615a      	str	r2, [r3, #20]
          break;
 800161e:	e003      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x130>
          break;
 8001626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	d801      	bhi.n	8001632 <HAL_GPIO_Init+0x13a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	e001      	b.n	8001636 <HAL_GPIO_Init+0x13e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3304      	adds	r3, #4
 8001636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d802      	bhi.n	8001644 <HAL_GPIO_Init+0x14c>
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x152>
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	3b08      	subs	r3, #8
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	210f      	movs	r1, #15
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80b1 	beq.w	80017da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001690:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_GPIO_Init+0x2bc>)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a40      	ldr	r2, [pc, #256]	; (80017b8 <HAL_GPIO_Init+0x2c0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d013      	beq.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <HAL_GPIO_Init+0x2c4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00d      	beq.n	80016e0 <HAL_GPIO_Init+0x1e8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <HAL_GPIO_Init+0x2c8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d007      	beq.n	80016dc <HAL_GPIO_Init+0x1e4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3d      	ldr	r2, [pc, #244]	; (80017c4 <HAL_GPIO_Init+0x2cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_GPIO_Init+0x1e0>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016d8:	2304      	movs	r3, #4
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016e4:	2300      	movs	r3, #0
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f6:	492f      	ldr	r1, [pc, #188]	; (80017b4 <HAL_GPIO_Init+0x2bc>)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	492c      	ldr	r1, [pc, #176]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	4928      	ldr	r1, [pc, #160]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	491e      	ldr	r1, [pc, #120]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4918      	ldr	r1, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	4914      	ldr	r1, [pc, #80]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d021      	beq.n	80017cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	490e      	ldr	r1, [pc, #56]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e021      	b.n	80017da <HAL_GPIO_Init+0x2e2>
 8001796:	bf00      	nop
 8001798:	10320000 	.word	0x10320000
 800179c:	10310000 	.word	0x10310000
 80017a0:	10220000 	.word	0x10220000
 80017a4:	10210000 	.word	0x10210000
 80017a8:	10120000 	.word	0x10120000
 80017ac:	10110000 	.word	0x10110000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40011400 	.word	0x40011400
 80017c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_GPIO_Init+0x304>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4909      	ldr	r1, [pc, #36]	; (80017fc <HAL_GPIO_Init+0x304>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f47f ae8e 	bne.w	800150c <HAL_GPIO_Init+0x14>
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	372c      	adds	r7, #44	; 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e304      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001850:	4b92      	ldr	r3, [pc, #584]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b04      	cmp	r3, #4
 800185a:	d00c      	beq.n	8001876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800185c:	4b8f      	ldr	r3, [pc, #572]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d112      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
 8001868:	4b8c      	ldr	r3, [pc, #560]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d10b      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	4b89      	ldr	r3, [pc, #548]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d06c      	beq.n	800195c <HAL_RCC_OscConfig+0x12c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d168      	bne.n	800195c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e2de      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x76>
 8001898:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e02e      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7a      	ldr	r2, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b78      	ldr	r3, [pc, #480]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a77      	ldr	r2, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0xbc>
 80018d2:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a71      	ldr	r2, [pc, #452]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018ec:	4b6b      	ldr	r3, [pc, #428]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6a      	ldr	r2, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a67      	ldr	r2, [pc, #412]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fbb0 	bl	8001070 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fbac 	bl	8001070 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e292      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xe4>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fb9c 	bl	8001070 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fb98 	bl	8001070 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e27e      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x10c>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196a:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001976:	4b49      	ldr	r3, [pc, #292]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x18c>
 8001982:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x176>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e252      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4939      	ldr	r1, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb51 	bl	8001070 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fb4d 	bl	8001070 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e233      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4927      	ldr	r1, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fb30 	bl	8001070 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fb2c 	bl	8001070 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e212      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03a      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d019      	beq.n	8001a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fb10 	bl	8001070 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fb0c 	bl	8001070 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1f2      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f000 fc02 	bl	800227c <RCC_Delay>
 8001a78:	e01c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff faf6 	bl	8001070 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a86:	e00f      	b.n	8001aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff faf2 	bl	8001070 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d908      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1d8      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	42420000 	.word	0x42420000
 8001aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	4b9b      	ldr	r3, [pc, #620]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e9      	bne.n	8001a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a6 	beq.w	8001c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b94      	ldr	r3, [pc, #592]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b91      	ldr	r3, [pc, #580]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a90      	ldr	r2, [pc, #576]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b8e      	ldr	r3, [pc, #568]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fab3 	bl	8001070 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff faaf 	bl	8001070 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	; 0x64
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e195      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <HAL_RCC_OscConfig+0x4ec>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x312>
 8001b34:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a77      	ldr	r2, [pc, #476]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a72      	ldr	r2, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a6f      	ldr	r2, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	e01c      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x356>
 8001b6c:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a69      	ldr	r2, [pc, #420]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a66      	ldr	r2, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b86:	4b64      	ldr	r3, [pc, #400]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a63      	ldr	r2, [pc, #396]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa63 	bl	8001070 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fa5f 	bl	8001070 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e143      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b54      	ldr	r3, [pc, #336]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCC_OscConfig+0x37e>
 8001bd0:	e014      	b.n	8001bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fa4d 	bl	8001070 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff fa49 	bl	8001070 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e12d      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 808c 	beq.w	8001d30 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c18:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c26:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e103      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d14e      	bne.n	8001cea <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d009      	beq.n	8001c6c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0ef      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_RCC_OscConfig+0x4f0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff f9fd 	bl	8001070 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001c7a:	f7ff f9f9 	bl	8001070 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0df      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	491c      	ldr	r1, [pc, #112]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4918      	ldr	r1, [pc, #96]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_RCC_OscConfig+0x4f0>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f9d5 	bl	8001070 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001cca:	f7ff f9d1 	bl	8001070 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0b7      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x49a>
 8001ce8:	e022      	b.n	8001d30 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_RCC_OscConfig+0x4e8>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_OscConfig+0x4f0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f9b8 	bl	8001070 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d04:	f7ff f9b4 	bl	8001070 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d908      	bls.n	8001d24 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e09a      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e9      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8088 	beq.w	8001e4a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3a:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d068      	beq.n	8001e18 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d14d      	bne.n	8001dea <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_RCC_OscConfig+0x628>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f98c 	bl	8001070 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f988 	bl	8001070 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e06e      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d10f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001d84:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4931      	ldr	r1, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	f023 020f 	bic.w	r2, r3, #15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	492d      	ldr	r1, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	430b      	orrs	r3, r1
 8001db6:	4927      	ldr	r1, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x628>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f955 	bl	8001070 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff f951 	bl	8001070 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e037      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x59a>
 8001de8:	e02f      	b.n	8001e4a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x628>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f93e 	bl	8001070 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f93a 	bl	8001070 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e020      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c8>
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x624>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420060 	.word	0x42420060

08001e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d0      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0b8      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b50      	ldr	r3, [pc, #320]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	494d      	ldr	r1, [pc, #308]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d040      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e07f      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e073      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06b      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff f890 	bl	8001070 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff f88c 	bl	8001070 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e053      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d210      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4922      	ldr	r1, [pc, #136]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e032      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4916      	ldr	r1, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	f000 f821 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	490a      	ldr	r1, [pc, #40]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	5ccb      	ldrb	r3, [r1, r3]
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1cc>)
 8002004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1d0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe ffee 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	08003200 	.word	0x08003200
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002034:	b092      	sub	sp, #72	; 0x48
 8002036:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002040:	2300      	movs	r3, #0
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002054:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d002      	beq.n	800206a <HAL_RCC_GetSysClockFreq+0x3a>
 8002064:	2b08      	cmp	r3, #8
 8002066:	d003      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x40>
 8002068:	e0c3      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800206e:	e0c3      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80ac 	beq.w	80021e2 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800208a:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f003 020f 	and.w	r2, r3, #15
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002098:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 808c 	beq.w	80021be <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	3301      	adds	r3, #1
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3302      	adds	r3, #2
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	2200      	movs	r2, #0
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	627a      	str	r2, [r7, #36]	; 0x24
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	2200      	movs	r2, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	4611      	mov	r1, r2
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	fb00 f203 	mul.w	r2, r0, r3
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	fb03 f301 	mul.w	r3, r3, r1
 80020de:	4413      	add	r3, r2
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	fba2 4500 	umull	r4, r5, r2, r0
 80020e6:	442b      	add	r3, r5
 80020e8:	461d      	mov	r5, r3
 80020ea:	4622      	mov	r2, r4
 80020ec:	462b      	mov	r3, r5
 80020ee:	f04f 0000 	mov.w	r0, #0
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	0159      	lsls	r1, r3, #5
 80020f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020fc:	0150      	lsls	r0, r2, #5
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	ebb2 0a04 	subs.w	sl, r2, r4
 8002106:	eb63 0b05 	sbc.w	fp, r3, r5
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002116:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800211a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800211e:	ebb2 080a 	subs.w	r8, r2, sl
 8002122:	eb63 090b 	sbc.w	r9, r3, fp
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213a:	4690      	mov	r8, r2
 800213c:	4699      	mov	r9, r3
 800213e:	eb18 0304 	adds.w	r3, r8, r4
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	eb49 0305 	adc.w	r3, r9, r5
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002156:	4629      	mov	r1, r5
 8002158:	024b      	lsls	r3, r1, #9
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	4604      	mov	r4, r0
 8002160:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002164:	4601      	mov	r1, r0
 8002166:	024a      	lsls	r2, r1, #9
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	2200      	movs	r2, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	617a      	str	r2, [r7, #20]
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	2200      	movs	r2, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002180:	4622      	mov	r2, r4
 8002182:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002186:	4645      	mov	r5, r8
 8002188:	fb05 f202 	mul.w	r2, r5, r2
 800218c:	46cc      	mov	ip, r9
 800218e:	4625      	mov	r5, r4
 8002190:	461c      	mov	r4, r3
 8002192:	4623      	mov	r3, r4
 8002194:	fb03 f30c 	mul.w	r3, r3, ip
 8002198:	4413      	add	r3, r2
 800219a:	4622      	mov	r2, r4
 800219c:	4644      	mov	r4, r8
 800219e:	fba2 2404 	umull	r2, r4, r2, r4
 80021a2:	61fc      	str	r4, [r7, #28]
 80021a4:	61ba      	str	r2, [r7, #24]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b0:	f7fe f85a 	bl	8000268 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4613      	mov	r3, r2
 80021ba:	647b      	str	r3, [r7, #68]	; 0x44
 80021bc:	e007      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80021c2:	fb03 f202 	mul.w	r2, r3, r2
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80021d0:	7b5b      	ldrb	r3, [r3, #13]
 80021d2:	461a      	mov	r2, r3
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80021da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
 80021e0:	e004      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80021f0:	e002      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80021f4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80021f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3748      	adds	r7, #72	; 0x48
 80021fe:	46bd      	mov	sp, r7
 8002200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	007a1200 	.word	0x007a1200
 800220c:	08003218 	.word	0x08003218
 8002210:	08003228 	.word	0x08003228
 8002214:	003d0900 	.word	0x003d0900

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCC_GetHCLKFreq+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff2 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08003210 	.word	0x08003210

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002258:	f7ff ffde 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0adb      	lsrs	r3, r3, #11
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4903      	ldr	r1, [pc, #12]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	08003210 	.word	0x08003210

0800227c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <RCC_Delay+0x34>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <RCC_Delay+0x38>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0a5b      	lsrs	r3, r3, #9
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002298:	bf00      	nop
  }
  while (Delay --);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	60fa      	str	r2, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f9      	bne.n	8002298 <RCC_Delay+0x1c>
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000000 	.word	0x20000000
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e076      	b.n	80023b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022da:	d009      	beq.n	80022f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
 80022e2:	e005      	b.n	80022f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fd5c 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	0c1a      	lsrs	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f002 0204 	and.w	r2, r2, #4
 8002396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_SPI_Transmit+0x22>
 80023de:	2302      	movs	r3, #2
 80023e0:	e12d      	b.n	800263e <HAL_SPI_Transmit+0x27e>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ea:	f7fe fe41 	bl	8001070 <HAL_GetTick>
 80023ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002404:	e116      	b.n	8002634 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_Transmit+0x52>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002416:	e10d      	b.n	8002634 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2203      	movs	r2, #3
 800241c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245e:	d10f      	bne.n	8002480 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d007      	beq.n	800249e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a6:	d14f      	bne.n	8002548 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_SPI_Transmit+0xf6>
 80024b0:	8afb      	ldrh	r3, [r7, #22]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d142      	bne.n	800253c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024da:	e02f      	b.n	800253c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d112      	bne.n	8002510 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	1c9a      	adds	r2, r3, #2
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	86da      	strh	r2, [r3, #54]	; 0x36
 800250e:	e015      	b.n	800253c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002510:	f7fe fdae 	bl	8001070 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d803      	bhi.n	8002528 <HAL_SPI_Transmit+0x168>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d102      	bne.n	800252e <HAL_SPI_Transmit+0x16e>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800253a:	e07b      	b.n	8002634 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ca      	bne.n	80024dc <HAL_SPI_Transmit+0x11c>
 8002546:	e050      	b.n	80025ea <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_SPI_Transmit+0x196>
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d144      	bne.n	80025e0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800257c:	e030      	b.n	80025e0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b02      	cmp	r3, #2
 800258a:	d113      	bne.n	80025b4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80025b2:	e015      	b.n	80025e0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b4:	f7fe fd5c 	bl	8001070 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d803      	bhi.n	80025cc <HAL_SPI_Transmit+0x20c>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d102      	bne.n	80025d2 <HAL_SPI_Transmit+0x212>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025de:	e029      	b.n	8002634 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1c9      	bne.n	800257e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fcd0 	bl	8002f94 <SPI_EndRxTxTransaction>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e003      	b.n	8002634 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800263c:	7ffb      	ldrb	r3, [r7, #31]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b088      	sub	sp, #32
 800264a:	af02      	add	r7, sp, #8
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	75fb      	strb	r3, [r7, #23]
    goto error;
 800266a:	e0fb      	b.n	8002864 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002674:	d112      	bne.n	800269c <HAL_SPI_Receive+0x56>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10e      	bne.n	800269c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2204      	movs	r2, #4
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f8ef 	bl	8002876 <HAL_SPI_TransmitReceive>
 8002698:	4603      	mov	r3, r0
 800269a:	e0e8      	b.n	800286e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_SPI_Receive+0x64>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0e1      	b.n	800286e <HAL_SPI_Receive+0x228>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b2:	f7fe fcdd 	bl	8001070 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_SPI_Receive+0x7e>
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026c8:	e0cc      	b.n	8002864 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2204      	movs	r2, #4
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002710:	d10f      	bne.n	8002732 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d007      	beq.n	8002750 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d16a      	bne.n	800282e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002758:	e032      	b.n	80027c0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d115      	bne.n	8002794 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f103 020c 	add.w	r2, r3, #12
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002792:	e015      	b.n	80027c0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002794:	f7fe fc6c 	bl	8001070 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d803      	bhi.n	80027ac <HAL_SPI_Receive+0x166>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d102      	bne.n	80027b2 <HAL_SPI_Receive+0x16c>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027be:	e051      	b.n	8002864 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1c7      	bne.n	800275a <HAL_SPI_Receive+0x114>
 80027ca:	e035      	b.n	8002838 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d113      	bne.n	8002802 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	b292      	uxth	r2, r2
 80027e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	1c9a      	adds	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002800:	e015      	b.n	800282e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002802:	f7fe fc35 	bl	8001070 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d803      	bhi.n	800281a <HAL_SPI_Receive+0x1d4>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d102      	bne.n	8002820 <HAL_SPI_Receive+0x1da>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800282c:	e01a      	b.n	8002864 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1c9      	bne.n	80027cc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	6839      	ldr	r1, [r7, #0]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fb57 	bl	8002ef0 <SPI_EndRxTransaction>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
 800285a:	e003      	b.n	8002864 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800286c:	7dfb      	ldrb	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08c      	sub	sp, #48	; 0x30
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002884:	2301      	movs	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_SPI_TransmitReceive+0x26>
 8002898:	2302      	movs	r3, #2
 800289a:	e198      	b.n	8002bce <HAL_SPI_TransmitReceive+0x358>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a4:	f7fe fbe4 	bl	8001070 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d00f      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x70>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028cc:	d107      	bne.n	80028de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <HAL_SPI_TransmitReceive+0x68>
 80028d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028de:	2302      	movs	r3, #2
 80028e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028e4:	e16d      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x82>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x82>
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028fe:	e160      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b04      	cmp	r3, #4
 800290a:	d003      	beq.n	8002914 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2205      	movs	r2, #5
 8002910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	887a      	ldrh	r2, [r7, #2]
 800292a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d007      	beq.n	8002968 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002970:	d17c      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_SPI_TransmitReceive+0x10a>
 800297a:	8b7b      	ldrh	r3, [r7, #26]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d16a      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a4:	e057      	b.n	8002a56 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d11b      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x176>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x176>
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d113      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d119      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x1b8>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d014      	beq.n	8002a2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	1c9a      	adds	r2, r3, #2
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a2e:	f7fe fb1f 	bl	8001070 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d80b      	bhi.n	8002a56 <HAL_SPI_TransmitReceive+0x1e0>
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d007      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a54:	e0b5      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1a2      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x130>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d19d      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x130>
 8002a6a:	e080      	b.n	8002b6e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x204>
 8002a74:	8b7b      	ldrh	r3, [r7, #26]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d16f      	bne.n	8002b5a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa0:	e05b      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11c      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x274>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d017      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x274>
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d114      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d119      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x2b6>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b2c:	f7fe faa0 	bl	8001070 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d803      	bhi.n	8002b44 <HAL_SPI_TransmitReceive+0x2ce>
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d102      	bne.n	8002b4a <HAL_SPI_TransmitReceive+0x2d4>
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b58:	e033      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d19e      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x22c>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d199      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa0e 	bl	8002f94 <SPI_EndRxTxTransaction>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b8a:	e01a      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bb8:	e003      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3730      	adds	r7, #48	; 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
    return;
 8002c1a:	e0be      	b.n	8002d9a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_SPI_IRQHandler+0x66>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	09db      	lsrs	r3, r3, #7
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
    return;
 8002c3c:	e0ad      	b.n	8002d9a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_SPI_IRQHandler+0x80>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80a1 	beq.w	8002d9a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 809a 	beq.w	8002d9a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d023      	beq.n	8002cba <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d011      	beq.n	8002ca2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f043 0204 	orr.w	r2, r3, #4
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	e00b      	b.n	8002cba <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]
        return;
 8002cb8:	e06f      	b.n	8002d9a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d014      	beq.n	8002cf0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d04f      	beq.n	8002d98 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d06:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <HAL_SPI_IRQHandler+0x14c>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d034      	beq.n	8002d8e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0203 	bic.w	r2, r2, #3
 8002d32:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d011      	beq.n	8002d60 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d40:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <HAL_SPI_IRQHandler+0x1c8>)
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe facd 	bl	80012e8 <HAL_DMA_Abort_IT>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d016      	beq.n	8002d96 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_SPI_IRQHandler+0x1c8>)
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fab7 	bl	80012e8 <HAL_DMA_Abort_IT>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002d8c:	e003      	b.n	8002d96 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f808 	bl	8002da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d94:	e000      	b.n	8002d98 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002d96:	bf00      	nop
    return;
 8002d98:	bf00      	nop
  }
}
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08002db7 	.word	0x08002db7

08002da4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ffe7 	bl	8002da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002df0:	f7fe f93e 	bl	8001070 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e00:	f7fe f936 	bl	8001070 <HAL_GetTick>
 8002e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	0d1b      	lsrs	r3, r3, #20
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e16:	e054      	b.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d050      	beq.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e20:	f7fe f926 	bl	8001070 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d902      	bls.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d13d      	bne.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4e:	d111      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d004      	beq.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d107      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7c:	d10f      	bne.n	8002e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e017      	b.n	8002ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d19b      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000

08002ef0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f04:	d111      	bne.n	8002f2a <SPI_EndRxTransaction+0x3a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0e:	d004      	beq.n	8002f1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d107      	bne.n	8002f2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f32:	d117      	bne.n	8002f64 <SPI_EndRxTransaction+0x74>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d112      	bne.n	8002f64 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	2101      	movs	r1, #1
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff ff49 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01a      	beq.n	8002f8a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e013      	b.n	8002f8c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff ff36 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e000      	b.n	8002f8c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ff18 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e000      	b.n	8002fc8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e042      	b.n	8003068 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd ff38 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f82b 	bl	8003070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030aa:	f023 030c 	bic.w	r3, r3, #12
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <UART_SetConfig+0x114>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7ff f8bc 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7ff f8a4 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <UART_SetConfig+0x118>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	0119      	lsls	r1, r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <UART_SetConfig+0x118>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	4419      	add	r1, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a07      	ldr	r2, [pc, #28]	; (8003188 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	440a      	add	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013800 	.word	0x40013800
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2600      	movs	r6, #0
 8003190:	4d0c      	ldr	r5, [pc, #48]	; (80031c4 <__libc_init_array+0x38>)
 8003192:	4c0d      	ldr	r4, [pc, #52]	; (80031c8 <__libc_init_array+0x3c>)
 8003194:	1b64      	subs	r4, r4, r5
 8003196:	10a4      	asrs	r4, r4, #2
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	f000 f822 	bl	80031e4 <_init>
 80031a0:	2600      	movs	r6, #0
 80031a2:	4d0a      	ldr	r5, [pc, #40]	; (80031cc <__libc_init_array+0x40>)
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <__libc_init_array+0x44>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	08003240 	.word	0x08003240
 80031c8:	08003240 	.word	0x08003240
 80031cc:	08003240 	.word	0x08003240
 80031d0:	08003244 	.word	0x08003244

080031d4 <memset>:
 80031d4:	4603      	mov	r3, r0
 80031d6:	4402      	add	r2, r0
 80031d8:	4293      	cmp	r3, r2
 80031da:	d100      	bne.n	80031de <memset+0xa>
 80031dc:	4770      	bx	lr
 80031de:	f803 1b01 	strb.w	r1, [r3], #1
 80031e2:	e7f9      	b.n	80031d8 <memset+0x4>

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
