
PruMoPaP6482_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a8c  08003a8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a94  08003a94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  08003b0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003b0c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b48  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001510  00000000  00000000  00028be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d22c  00000000  00000000  0002b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009400  00000000  00000000  0004829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aac34  00000000  00000000  0005169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc2d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  000fc320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080039f0 	.word	0x080039f0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080039f0 	.word	0x080039f0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fe0f 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 fb3d 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 fbe9 	bl	8000d10 <MX_GPIO_Init>
  MX_SPI1_Init();
 800053e:	f000 fb87 	bl	8000c50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000542:	f000 fbbb 	bl	8000cbc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2108      	movs	r1, #8
 800054a:	48ce      	ldr	r0, [pc, #824]	; (8000884 <main+0x358>)
 800054c:	f001 f8f0 	bl	8001730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2104      	movs	r1, #4
 8000554:	48cb      	ldr	r0, [pc, #812]	; (8000884 <main+0x358>)
 8000556:	f001 f8eb 	bl	8001730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2102      	movs	r1, #2
 800055e:	48c9      	ldr	r0, [pc, #804]	; (8000884 <main+0x358>)
 8000560:	f001 f8e6 	bl	8001730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SPARE_GPIO_Port, LED_SPARE_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	48c6      	ldr	r0, [pc, #792]	; (8000884 <main+0x358>)
 800056a:	f001 f8e1 	bl	8001730 <HAL_GPIO_WritePin>
 //  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Estado inicial del pin de selección para la comunicación SPI

   uint8_t comand[]={0};
 800056e:	2300      	movs	r3, #0
 8000570:	723b      	strb	r3, [r7, #8]
   uint8_t direction[]={0};
 8000572:	2300      	movs	r3, #0
 8000574:	713b      	strb	r3, [r7, #4]

   uint32_t pasos = 200;
 8000576:	23c8      	movs	r3, #200	; 0xc8
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
   uint8_t fwd = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   uint8_t move = 0x40;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

   uint8_t el_pos = 0x00;
 8000586:	2300      	movs	r3, #0
 8000588:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   uint8_t t_val = 0b01111100;
 800058c:	237c      	movs	r3, #124	; 0x7c
 800058e:	f887 3020 	strb.w	r3, [r7, #32]
   uint8_t t_fast = 0b11111111;
 8000592:	23ff      	movs	r3, #255	; 0xff
 8000594:	77fb      	strb	r3, [r7, #31]
   uint8_t ton_min = 0b11111111;
 8000596:	23ff      	movs	r3, #255	; 0xff
 8000598:	77bb      	strb	r3, [r7, #30]
   uint8_t toff_min = 0b11111111;
 800059a:	23ff      	movs	r3, #255	; 0xff
 800059c:	777b      	strb	r3, [r7, #29]
   uint8_t ocd_th = 0x08;
 800059e:	2308      	movs	r3, #8
 80005a0:	773b      	strb	r3, [r7, #28]

   uint8_t step_mode_bit3 = 0x1 << 3;
 80005a2:	2308      	movs	r3, #8
 80005a4:	76fb      	strb	r3, [r7, #27]
   uint8_t step_sel = (step_mode_bit3 | 0x00);
 80005a6:	7efb      	ldrb	r3, [r7, #27]
 80005a8:	76bb      	strb	r3, [r7, #26]
   uint8_t sync_sel = 0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	767b      	strb	r3, [r7, #25]
   uint8_t step_mode = (sync_sel | \
 80005ae:	7e7a      	ldrb	r2, [r7, #25]
 80005b0:	7ebb      	ldrb	r3, [r7, #26]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	763b      	strb	r3, [r7, #24]
 		  	  	  	  step_sel);

   uint8_t alarm_en = 0b11111111;
 80005b6:	23ff      	movs	r3, #255	; 0xff
 80005b8:	75fb      	strb	r3, [r7, #23]

   uint16_t config_osc_sel = 0x0000;
 80005ba:	2300      	movs	r3, #0
 80005bc:	82bb      	strh	r3, [r7, #20]
   uint16_t config_oc_sd = 0x0080; //Para el motor ante una detección de sobre corriente. 0x0000 para deshabilitarlo.
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	827b      	strh	r3, [r7, #18]
   uint16_t config_pow_sr = 0x0000;
 80005c2:	2300      	movs	r3, #0
 80005c4:	823b      	strh	r3, [r7, #16]
   uint16_t config_tq_reg = 0x0000;
 80005c6:	2300      	movs	r3, #0
 80005c8:	81fb      	strh	r3, [r7, #14]
   uint16_t config_toff = 0x007F;
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	81bb      	strh	r3, [r7, #12]
   uint16_t config_reg = (config_osc_sel | \
 80005ce:	8aba      	ldrh	r2, [r7, #20]
 80005d0:	8a7b      	ldrh	r3, [r7, #18]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	8a3b      	ldrh	r3, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	4313      	orrs	r3, r2
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	89bb      	ldrh	r3, [r7, #12]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	817b      	strh	r3, [r7, #10]
   uint8_t estado_spi_tx;


   //Configuraciones de los modos básicos en los registros esenciales:
   //Posición electrica:
   direction[3] = 0x02;
 80005e8:	2302      	movs	r3, #2
 80005ea:	71fb      	strb	r3, [r7, #7]
   comand [2] = el_pos;
 80005ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80005f0:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	48a4      	ldr	r0, [pc, #656]	; (8000888 <main+0x35c>)
 80005f8:	f001 f89a 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	48a2      	ldr	r0, [pc, #648]	; (800088c <main+0x360>)
 8000604:	f001 fe74 	bl	80022f0 <HAL_SPI_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2203      	movs	r2, #3
 8000614:	489d      	ldr	r0, [pc, #628]	; (800088c <main+0x360>)
 8000616:	f001 fe6b 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	489a      	ldr	r0, [pc, #616]	; (8000888 <main+0x35c>)
 8000620:	f001 f886 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	4896      	ldr	r0, [pc, #600]	; (8000884 <main+0x358>)
 800062a:	f001 f881 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 800062e:	f000 fbfd 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2201      	movs	r2, #1
 8000636:	4996      	ldr	r1, [pc, #600]	; (8000890 <main+0x364>)
 8000638:	4896      	ldr	r0, [pc, #600]	; (8000894 <main+0x368>)
 800063a:	f002 fbad 	bl	8002d98 <HAL_UART_Transmit>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b95      	ldr	r3, [pc, #596]	; (8000898 <main+0x36c>)
 8000644:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 8000646:	4b94      	ldr	r3, [pc, #592]	; (8000898 <main+0x36c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4993      	ldr	r1, [pc, #588]	; (800089c <main+0x370>)
 800064e:	4890      	ldr	r0, [pc, #576]	; (8000890 <main+0x364>)
 8000650:	f002 fd54 	bl	80030fc <siprintf>

   //Valor de regulación de corriente de torque
   direction[3] = 0x09;
 8000654:	2309      	movs	r3, #9
 8000656:	71fb      	strb	r3, [r7, #7]
   comand [2] = t_val;
 8000658:	f897 3020 	ldrb.w	r3, [r7, #32]
 800065c:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2110      	movs	r1, #16
 8000662:	4889      	ldr	r0, [pc, #548]	; (8000888 <main+0x35c>)
 8000664:	f001 f864 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4887      	ldr	r0, [pc, #540]	; (800088c <main+0x360>)
 8000670:	f001 fe3e 	bl	80022f0 <HAL_SPI_Transmit>
 8000674:	4603      	mov	r3, r0
 8000676:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000678:	f107 0108 	add.w	r1, r7, #8
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	2203      	movs	r2, #3
 8000680:	4882      	ldr	r0, [pc, #520]	; (800088c <main+0x360>)
 8000682:	f001 fe35 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	487f      	ldr	r0, [pc, #508]	; (8000888 <main+0x35c>)
 800068c:	f001 f850 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2102      	movs	r1, #2
 8000694:	487b      	ldr	r0, [pc, #492]	; (8000884 <main+0x358>)
 8000696:	f001 f84b 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 800069a:	f000 fbc7 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	2201      	movs	r2, #1
 80006a2:	497b      	ldr	r1, [pc, #492]	; (8000890 <main+0x364>)
 80006a4:	487b      	ldr	r0, [pc, #492]	; (8000894 <main+0x368>)
 80006a6:	f002 fb77 	bl	8002d98 <HAL_UART_Transmit>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b7a      	ldr	r3, [pc, #488]	; (8000898 <main+0x36c>)
 80006b0:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 80006b2:	4b79      	ldr	r3, [pc, #484]	; (8000898 <main+0x36c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4978      	ldr	r1, [pc, #480]	; (800089c <main+0x370>)
 80006ba:	4875      	ldr	r0, [pc, #468]	; (8000890 <main+0x364>)
 80006bc:	f002 fd1e 	bl	80030fc <siprintf>

   //Maximum fast decay time (TOFF_FAST) and the maximum fall step time (FALL_STEP) used by the current control system
   direction[3] = 0x0E;
 80006c0:	230e      	movs	r3, #14
 80006c2:	71fb      	strb	r3, [r7, #7]
   comand [2] = t_fast;
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	486e      	ldr	r0, [pc, #440]	; (8000888 <main+0x35c>)
 80006ce:	f001 f82f 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2201      	movs	r2, #1
 80006d8:	486c      	ldr	r0, [pc, #432]	; (800088c <main+0x360>)
 80006da:	f001 fe09 	bl	80022f0 <HAL_SPI_Transmit>
 80006de:	4603      	mov	r3, r0
 80006e0:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 80006e2:	f107 0108 	add.w	r1, r7, #8
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	2203      	movs	r2, #3
 80006ea:	4868      	ldr	r0, [pc, #416]	; (800088c <main+0x360>)
 80006ec:	f001 fe00 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2110      	movs	r1, #16
 80006f4:	4864      	ldr	r0, [pc, #400]	; (8000888 <main+0x35c>)
 80006f6:	f001 f81b 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	4861      	ldr	r0, [pc, #388]	; (8000884 <main+0x358>)
 8000700:	f001 f816 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 8000704:	f000 fb92 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	2201      	movs	r2, #1
 800070c:	4960      	ldr	r1, [pc, #384]	; (8000890 <main+0x364>)
 800070e:	4861      	ldr	r0, [pc, #388]	; (8000894 <main+0x368>)
 8000710:	f002 fb42 	bl	8002d98 <HAL_UART_Transmit>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b5f      	ldr	r3, [pc, #380]	; (8000898 <main+0x36c>)
 800071a:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 800071c:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <main+0x36c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	495e      	ldr	r1, [pc, #376]	; (800089c <main+0x370>)
 8000724:	485a      	ldr	r0, [pc, #360]	; (8000890 <main+0x364>)
 8000726:	f002 fce9 	bl	80030fc <siprintf>

   //Mínimo tiempo encendido, en ambos casos se configura con el máximo permitido.
   direction[3] = 0x0F;
 800072a:	230f      	movs	r3, #15
 800072c:	71fb      	strb	r3, [r7, #7]
   comand [2] = ton_min;
 800072e:	7fbb      	ldrb	r3, [r7, #30]
 8000730:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	4854      	ldr	r0, [pc, #336]	; (8000888 <main+0x35c>)
 8000738:	f000 fffa 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 800073c:	1d39      	adds	r1, r7, #4
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	2201      	movs	r2, #1
 8000742:	4852      	ldr	r0, [pc, #328]	; (800088c <main+0x360>)
 8000744:	f001 fdd4 	bl	80022f0 <HAL_SPI_Transmit>
 8000748:	4603      	mov	r3, r0
 800074a:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 800074c:	f107 0108 	add.w	r1, r7, #8
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	2203      	movs	r2, #3
 8000754:	484d      	ldr	r0, [pc, #308]	; (800088c <main+0x360>)
 8000756:	f001 fdcb 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	2110      	movs	r1, #16
 800075e:	484a      	ldr	r0, [pc, #296]	; (8000888 <main+0x35c>)
 8000760:	f000 ffe6 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000764:	2201      	movs	r2, #1
 8000766:	2102      	movs	r1, #2
 8000768:	4846      	ldr	r0, [pc, #280]	; (8000884 <main+0x358>)
 800076a:	f000 ffe1 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 800076e:	f000 fb5d 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	2201      	movs	r2, #1
 8000776:	4946      	ldr	r1, [pc, #280]	; (8000890 <main+0x364>)
 8000778:	4846      	ldr	r0, [pc, #280]	; (8000894 <main+0x368>)
 800077a:	f002 fb0d 	bl	8002d98 <HAL_UART_Transmit>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b45      	ldr	r3, [pc, #276]	; (8000898 <main+0x36c>)
 8000784:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <main+0x36c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	4943      	ldr	r1, [pc, #268]	; (800089c <main+0x370>)
 800078e:	4840      	ldr	r0, [pc, #256]	; (8000890 <main+0x364>)
 8000790:	f002 fcb4 	bl	80030fc <siprintf>

   //Mínimo tiempo apagado
   direction[3] = 0x10;
 8000794:	2310      	movs	r3, #16
 8000796:	71fb      	strb	r3, [r7, #7]
   comand [2] = toff_min;
 8000798:	7f7b      	ldrb	r3, [r7, #29]
 800079a:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	4839      	ldr	r0, [pc, #228]	; (8000888 <main+0x35c>)
 80007a2:	f000 ffc5 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80007a6:	1d39      	adds	r1, r7, #4
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2201      	movs	r2, #1
 80007ac:	4837      	ldr	r0, [pc, #220]	; (800088c <main+0x360>)
 80007ae:	f001 fd9f 	bl	80022f0 <HAL_SPI_Transmit>
 80007b2:	4603      	mov	r3, r0
 80007b4:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 80007b6:	f107 0108 	add.w	r1, r7, #8
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	2203      	movs	r2, #3
 80007be:	4833      	ldr	r0, [pc, #204]	; (800088c <main+0x360>)
 80007c0:	f001 fd96 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2110      	movs	r1, #16
 80007c8:	482f      	ldr	r0, [pc, #188]	; (8000888 <main+0x35c>)
 80007ca:	f000 ffb1 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	482c      	ldr	r0, [pc, #176]	; (8000884 <main+0x358>)
 80007d4:	f000 ffac 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 80007d8:	f000 fb28 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	2201      	movs	r2, #1
 80007e0:	492b      	ldr	r1, [pc, #172]	; (8000890 <main+0x364>)
 80007e2:	482c      	ldr	r0, [pc, #176]	; (8000894 <main+0x368>)
 80007e4:	f002 fad8 	bl	8002d98 <HAL_UART_Transmit>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <main+0x36c>)
 80007ee:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <main+0x36c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4929      	ldr	r1, [pc, #164]	; (800089c <main+0x370>)
 80007f8:	4825      	ldr	r0, [pc, #148]	; (8000890 <main+0x364>)
 80007fa:	f002 fc7f 	bl	80030fc <siprintf>

   //Valor de umbral de sobre corriente
   direction[3] = 0x13;
 80007fe:	2313      	movs	r3, #19
 8000800:	71fb      	strb	r3, [r7, #7]
   comand [2] = ocd_th;
 8000802:	7f3b      	ldrb	r3, [r7, #28]
 8000804:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2110      	movs	r1, #16
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <main+0x35c>)
 800080c:	f000 ff90 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	2201      	movs	r2, #1
 8000816:	481d      	ldr	r0, [pc, #116]	; (800088c <main+0x360>)
 8000818:	f001 fd6a 	bl	80022f0 <HAL_SPI_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000820:	f107 0108 	add.w	r1, r7, #8
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	2203      	movs	r2, #3
 8000828:	4818      	ldr	r0, [pc, #96]	; (800088c <main+0x360>)
 800082a:	f001 fd61 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	2110      	movs	r1, #16
 8000832:	4815      	ldr	r0, [pc, #84]	; (8000888 <main+0x35c>)
 8000834:	f000 ff7c 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0x358>)
 800083e:	f000 ff77 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 8000842:	f000 faf3 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 8000846:	2364      	movs	r3, #100	; 0x64
 8000848:	2201      	movs	r2, #1
 800084a:	4911      	ldr	r1, [pc, #68]	; (8000890 <main+0x364>)
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <main+0x368>)
 800084e:	f002 faa3 	bl	8002d98 <HAL_UART_Transmit>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <main+0x36c>)
 8000858:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <main+0x36c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	490e      	ldr	r1, [pc, #56]	; (800089c <main+0x370>)
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <main+0x364>)
 8000864:	f002 fc4a 	bl	80030fc <siprintf>

   // Configuración del modo de paso
   direction[3] = 0x18;
 8000868:	2318      	movs	r3, #24
 800086a:	71fb      	strb	r3, [r7, #7]
   comand [2] = config_reg;
 800086c:	897b      	ldrh	r3, [r7, #10]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <main+0x35c>)
 8000878:	f000 ff5a 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 800087c:	1d39      	adds	r1, r7, #4
 800087e:	2364      	movs	r3, #100	; 0x64
 8000880:	2201      	movs	r2, #1
 8000882:	e00d      	b.n	80008a0 <main+0x374>
 8000884:	40011000 	.word	0x40011000
 8000888:	40010800 	.word	0x40010800
 800088c:	2000008c 	.word	0x2000008c
 8000890:	20000130 	.word	0x20000130
 8000894:	200000e4 	.word	0x200000e4
 8000898:	2000012c 	.word	0x2000012c
 800089c:	08003a08 	.word	0x08003a08
 80008a0:	48bd      	ldr	r0, [pc, #756]	; (8000b98 <main+0x66c>)
 80008a2:	f001 fd25 	bl	80022f0 <HAL_SPI_Transmit>
 80008a6:	4603      	mov	r3, r0
 80008a8:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 80008aa:	f107 0108 	add.w	r1, r7, #8
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	2203      	movs	r2, #3
 80008b2:	48b9      	ldr	r0, [pc, #740]	; (8000b98 <main+0x66c>)
 80008b4:	f001 fd1c 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	48b7      	ldr	r0, [pc, #732]	; (8000b9c <main+0x670>)
 80008be:	f000 ff37 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2102      	movs	r1, #2
 80008c6:	48b6      	ldr	r0, [pc, #728]	; (8000ba0 <main+0x674>)
 80008c8:	f000 ff32 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 80008cc:	f000 faae 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	2201      	movs	r2, #1
 80008d4:	49b3      	ldr	r1, [pc, #716]	; (8000ba4 <main+0x678>)
 80008d6:	48b4      	ldr	r0, [pc, #720]	; (8000ba8 <main+0x67c>)
 80008d8:	f002 fa5e 	bl	8002d98 <HAL_UART_Transmit>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4bb2      	ldr	r3, [pc, #712]	; (8000bac <main+0x680>)
 80008e2:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 80008e4:	4bb1      	ldr	r3, [pc, #708]	; (8000bac <main+0x680>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	49b1      	ldr	r1, [pc, #708]	; (8000bb0 <main+0x684>)
 80008ec:	48ad      	ldr	r0, [pc, #692]	; (8000ba4 <main+0x678>)
 80008ee:	f002 fc05 	bl	80030fc <siprintf>

   //Habilitación de alarmas
   direction[3] = 0x17;
 80008f2:	2317      	movs	r3, #23
 80008f4:	71fb      	strb	r3, [r7, #7]
   comand [2] = alarm_en;
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	48a7      	ldr	r0, [pc, #668]	; (8000b9c <main+0x670>)
 8000900:	f000 ff16 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 8000904:	1d39      	adds	r1, r7, #4
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	2201      	movs	r2, #1
 800090a:	48a3      	ldr	r0, [pc, #652]	; (8000b98 <main+0x66c>)
 800090c:	f001 fcf0 	bl	80022f0 <HAL_SPI_Transmit>
 8000910:	4603      	mov	r3, r0
 8000912:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000914:	f107 0108 	add.w	r1, r7, #8
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	2203      	movs	r2, #3
 800091c:	489e      	ldr	r0, [pc, #632]	; (8000b98 <main+0x66c>)
 800091e:	f001 fce7 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	2110      	movs	r1, #16
 8000926:	489d      	ldr	r0, [pc, #628]	; (8000b9c <main+0x670>)
 8000928:	f000 ff02 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2102      	movs	r1, #2
 8000930:	489b      	ldr	r0, [pc, #620]	; (8000ba0 <main+0x674>)
 8000932:	f000 fefd 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 8000936:	f000 fa79 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	2201      	movs	r2, #1
 800093e:	4999      	ldr	r1, [pc, #612]	; (8000ba4 <main+0x678>)
 8000940:	4899      	ldr	r0, [pc, #612]	; (8000ba8 <main+0x67c>)
 8000942:	f002 fa29 	bl	8002d98 <HAL_UART_Transmit>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b98      	ldr	r3, [pc, #608]	; (8000bac <main+0x680>)
 800094c:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 800094e:	4b97      	ldr	r3, [pc, #604]	; (8000bac <main+0x680>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4996      	ldr	r1, [pc, #600]	; (8000bb0 <main+0x684>)
 8000956:	4893      	ldr	r0, [pc, #588]	; (8000ba4 <main+0x678>)
 8000958:	f002 fbd0 	bl	80030fc <siprintf>

   //Configuraciones del registro CONFIG
   direction[3] = 0x16;
 800095c:	2316      	movs	r3, #22
 800095e:	71fb      	strb	r3, [r7, #7]
   comand [2] = step_mode;
 8000960:	7e3b      	ldrb	r3, [r7, #24]
 8000962:	72bb      	strb	r3, [r7, #10]
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	488c      	ldr	r0, [pc, #560]	; (8000b9c <main+0x670>)
 800096a:	f000 fee1 	bl	8001730 <HAL_GPIO_WritePin>
   estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 800096e:	1d39      	adds	r1, r7, #4
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	2201      	movs	r2, #1
 8000974:	4888      	ldr	r0, [pc, #544]	; (8000b98 <main+0x66c>)
 8000976:	f001 fcbb 	bl	80022f0 <HAL_SPI_Transmit>
 800097a:	4603      	mov	r3, r0
 800097c:	727b      	strb	r3, [r7, #9]
   HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 800097e:	f107 0108 	add.w	r1, r7, #8
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	2203      	movs	r2, #3
 8000986:	4884      	ldr	r0, [pc, #528]	; (8000b98 <main+0x66c>)
 8000988:	f001 fcb2 	bl	80022f0 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	2110      	movs	r1, #16
 8000990:	4882      	ldr	r0, [pc, #520]	; (8000b9c <main+0x670>)
 8000992:	f000 fecd 	bl	8001730 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2102      	movs	r1, #2
 800099a:	4881      	ldr	r0, [pc, #516]	; (8000ba0 <main+0x674>)
 800099c:	f000 fec8 	bl	8001730 <HAL_GPIO_WritePin>
   recibir ();
 80009a0:	f000 fa44 	bl	8000e2c <recibir>
   estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	2201      	movs	r2, #1
 80009a8:	497e      	ldr	r1, [pc, #504]	; (8000ba4 <main+0x678>)
 80009aa:	487f      	ldr	r0, [pc, #508]	; (8000ba8 <main+0x67c>)
 80009ac:	f002 f9f4 	bl	8002d98 <HAL_UART_Transmit>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b7d      	ldr	r3, [pc, #500]	; (8000bac <main+0x680>)
 80009b6:	701a      	strb	r2, [r3, #0]
   sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 80009b8:	4b7c      	ldr	r3, [pc, #496]	; (8000bac <main+0x680>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	497c      	ldr	r1, [pc, #496]	; (8000bb0 <main+0x684>)
 80009c0:	4878      	ldr	r0, [pc, #480]	; (8000ba4 <main+0x678>)
 80009c2:	f002 fb9b 	bl	80030fc <siprintf>


   while (1)
   {
	  direction[3] = (move | fwd);
 80009c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80009ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	71fb      	strb	r3, [r7, #7]
 	  comand [2] = pasos >> 16;
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	72bb      	strb	r3, [r7, #10]
 	  comand [1] = pasos >> 8;
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	727b      	strb	r3, [r7, #9]
 	  comand [0] = pasos;
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	723b      	strb	r3, [r7, #8]

 	  // Mover motor hacia adelante por 5s
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	486b      	ldr	r0, [pc, #428]	; (8000b9c <main+0x670>)
 80009f0:	f000 fe9e 	bl	8001730 <HAL_GPIO_WritePin>
 	  //Se envía la dirección o registro a escribirse
 	  estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) direction, 1, 100);
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2201      	movs	r2, #1
 80009fa:	4867      	ldr	r0, [pc, #412]	; (8000b98 <main+0x66c>)
 80009fc:	f001 fc78 	bl	80022f0 <HAL_SPI_Transmit>
 8000a00:	4603      	mov	r3, r0
 8000a02:	727b      	strb	r3, [r7, #9]
 	  //Encender LED para depurar
 	  if (estado_spi_tx==HAL_OK) HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 8000a04:	7a7b      	ldrb	r3, [r7, #9]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d105      	bne.n	8000a16 <main+0x4ea>
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4864      	ldr	r0, [pc, #400]	; (8000ba0 <main+0x674>)
 8000a10:	f000 fe8e 	bl	8001730 <HAL_GPIO_WritePin>
 8000a14:	e004      	b.n	8000a20 <main+0x4f4>
 	  else HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4861      	ldr	r0, [pc, #388]	; (8000ba0 <main+0x674>)
 8000a1c:	f000 fe88 	bl	8001730 <HAL_GPIO_WritePin>
 	  //Se envía el comando
 	  estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	2203      	movs	r2, #3
 8000a28:	485b      	ldr	r0, [pc, #364]	; (8000b98 <main+0x66c>)
 8000a2a:	f001 fc61 	bl	80022f0 <HAL_SPI_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	727b      	strb	r3, [r7, #9]
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2110      	movs	r1, #16
 8000a36:	4859      	ldr	r0, [pc, #356]	; (8000b9c <main+0x670>)
 8000a38:	f000 fe7a 	bl	8001730 <HAL_GPIO_WritePin>
 	  if (estado_spi_tx==HAL_OK) HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 8000a3c:	7a7b      	ldrb	r3, [r7, #9]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d105      	bne.n	8000a4e <main+0x522>
 8000a42:	2201      	movs	r2, #1
 8000a44:	2108      	movs	r1, #8
 8000a46:	4856      	ldr	r0, [pc, #344]	; (8000ba0 <main+0x674>)
 8000a48:	f000 fe72 	bl	8001730 <HAL_GPIO_WritePin>
 8000a4c:	e004      	b.n	8000a58 <main+0x52c>
 	  else HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4853      	ldr	r0, [pc, #332]	; (8000ba0 <main+0x674>)
 8000a54:	f000 fe6c 	bl	8001730 <HAL_GPIO_WritePin>

 	  recibir ();
 8000a58:	f000 f9e8 	bl	8000e2c <recibir>
 	  estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4950      	ldr	r1, [pc, #320]	; (8000ba4 <main+0x678>)
 8000a62:	4851      	ldr	r0, [pc, #324]	; (8000ba8 <main+0x67c>)
 8000a64:	f002 f998 	bl	8002d98 <HAL_UART_Transmit>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <main+0x680>)
 8000a6e:	701a      	strb	r2, [r3, #0]
 	  sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 8000a70:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <main+0x680>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	494e      	ldr	r1, [pc, #312]	; (8000bb0 <main+0x684>)
 8000a78:	484a      	ldr	r0, [pc, #296]	; (8000ba4 <main+0x678>)
 8000a7a:	f002 fb3f 	bl	80030fc <siprintf>
 	  if (estado_rx==HAL_OK) HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 1);
 8000a7e:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <main+0x680>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d105      	bne.n	8000a92 <main+0x566>
 8000a86:	2201      	movs	r2, #1
 8000a88:	2104      	movs	r1, #4
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <main+0x674>)
 8000a8c:	f000 fe50 	bl	8001730 <HAL_GPIO_WritePin>
 8000a90:	e004      	b.n	8000a9c <main+0x570>
 	  else HAL_GPIO_WritePin(LED_SPARE_GPIO_Port, LED_SPARE_Pin, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2101      	movs	r1, #1
 8000a96:	4842      	ldr	r0, [pc, #264]	; (8000ba0 <main+0x674>)
 8000a98:	f000 fe4a 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_Delay (5000);
 8000a9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aa0:	f000 fbba 	bl	8001218 <HAL_Delay>

 	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	483d      	ldr	r0, [pc, #244]	; (8000ba0 <main+0x674>)
 8000aaa:	f000 fe41 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	483b      	ldr	r0, [pc, #236]	; (8000ba0 <main+0x674>)
 8000ab4:	f000 fe3c 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	4838      	ldr	r0, [pc, #224]	; (8000ba0 <main+0x674>)
 8000abe:	f000 fe37 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_SPARE_GPIO_Port, LED_SPARE_Pin, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <main+0x674>)
 8000ac8:	f000 fe32 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_Delay (5000);
 8000acc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ad0:	f000 fba2 	bl	8001218 <HAL_Delay>

 	  //Detener motor
 	  comand [0] = 0xB0;
 8000ad4:	23b0      	movs	r3, #176	; 0xb0
 8000ad6:	723b      	strb	r3, [r7, #8]
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2110      	movs	r1, #16
 8000adc:	482f      	ldr	r0, [pc, #188]	; (8000b9c <main+0x670>)
 8000ade:	f000 fe27 	bl	8001730 <HAL_GPIO_WritePin>
 	  estado_spi_tx= HAL_SPI_Transmit(&hspi1, (uint8_t*) comand, 3, 100);
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	2203      	movs	r2, #3
 8000aea:	482b      	ldr	r0, [pc, #172]	; (8000b98 <main+0x66c>)
 8000aec:	f001 fc00 	bl	80022f0 <HAL_SPI_Transmit>
 8000af0:	4603      	mov	r3, r0
 8000af2:	727b      	strb	r3, [r7, #9]
 	  if (estado_spi_tx==HAL_OK) HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 1);
 8000af4:	7a7b      	ldrb	r3, [r7, #9]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d105      	bne.n	8000b06 <main+0x5da>
 8000afa:	2201      	movs	r2, #1
 8000afc:	2108      	movs	r1, #8
 8000afe:	4828      	ldr	r0, [pc, #160]	; (8000ba0 <main+0x674>)
 8000b00:	f000 fe16 	bl	8001730 <HAL_GPIO_WritePin>
 8000b04:	e004      	b.n	8000b10 <main+0x5e4>
 	  else HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <main+0x674>)
 8000b0c:	f000 fe10 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <main+0x670>)
 8000b16:	f000 fe0b 	bl	8001730 <HAL_GPIO_WritePin>

 	  recibir ();
 8000b1a:	f000 f987 	bl	8000e2c <recibir>
 	  estado_rx = HAL_UART_Transmit(&huart1, rx_buffer, 1, 100);
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2201      	movs	r2, #1
 8000b22:	4920      	ldr	r1, [pc, #128]	; (8000ba4 <main+0x678>)
 8000b24:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <main+0x67c>)
 8000b26:	f002 f937 	bl	8002d98 <HAL_UART_Transmit>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <main+0x680>)
 8000b30:	701a      	strb	r2, [r3, #0]
 	  sprintf (rx_buffer, "Valor recibido: %u,\n\r", estado_rx);
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <main+0x680>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	491d      	ldr	r1, [pc, #116]	; (8000bb0 <main+0x684>)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <main+0x678>)
 8000b3c:	f002 fade 	bl	80030fc <siprintf>
 	  if (estado_rx==HAL_OK) HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 1);
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <main+0x680>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <main+0x628>
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <main+0x674>)
 8000b4e:	f000 fdef 	bl	8001730 <HAL_GPIO_WritePin>
 8000b52:	e004      	b.n	8000b5e <main+0x632>
 	  else HAL_GPIO_WritePin(LED_SPARE_GPIO_Port, LED_SPARE_Pin, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <main+0x674>)
 8000b5a:	f000 fde9 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_Delay (1000);
 8000b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b62:	f000 fb59 	bl	8001218 <HAL_Delay>

 	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2102      	movs	r1, #2
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <main+0x674>)
 8000b6c:	f000 fde0 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <main+0x674>)
 8000b76:	f000 fddb 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_BUSY_GPIO_Port, LED_BUSY_Pin, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <main+0x674>)
 8000b80:	f000 fdd6 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(LED_SPARE_GPIO_Port, LED_SPARE_Pin, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <main+0x674>)
 8000b8a:	f000 fdd1 	bl	8001730 <HAL_GPIO_WritePin>
 	  HAL_Delay (1000);
 8000b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b92:	f000 fb41 	bl	8001218 <HAL_Delay>
	  direction[3] = (move | fwd);
 8000b96:	e716      	b.n	80009c6 <main+0x49a>
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	20000130 	.word	0x20000130
 8000ba8:	200000e4 	.word	0x200000e4
 8000bac:	2000012c 	.word	0x2000012c
 8000bb0:	08003a08 	.word	0x08003a08

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	2238      	movs	r2, #56	; 0x38
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fa92 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fdab 	bl	8001760 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000c10:	f000 f948 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f8ac 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c3a:	f000 f933 	bl	8000ea4 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000c3e:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <SystemClock_Config+0x98>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	; 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	42420070 	.word	0x42420070

08000c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f001 faa1 	bl	80021e8 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 f8fa 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000008c 	.word	0x2000008c
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART1_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	f002 f800 	bl	8002cf8 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f8d1 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000e4 	.word	0x200000e4
 8000d0c:	40013800 	.word	0x40013800

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a3c      	ldr	r2, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d2a:	f043 0320 	orr.w	r3, r3, #32
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a36      	ldr	r2, [pc, #216]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_GPIO_Init+0x10c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SPARE_Pin|LED_ERROR_Pin|LED_BUSY_Pin|LED_READY_Pin
 8000d84:	2200      	movs	r2, #0
 8000d86:	213f      	movs	r1, #63	; 0x3f
 8000d88:	4825      	ldr	r0, [pc, #148]	; (8000e20 <MX_GPIO_Init+0x110>)
 8000d8a:	f000 fcd1 	bl	8001730 <HAL_GPIO_WritePin>
                          |SW_Pin|STBY_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STCK_Pin|CS_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2118      	movs	r1, #24
 8000d92:	4824      	ldr	r0, [pc, #144]	; (8000e24 <MX_GPIO_Init+0x114>)
 8000d94:	f000 fccc 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLAG_Pin|BUSY_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x118>)
 8000da0:	f000 fcc6 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SPARE_Pin LED_ERROR_Pin LED_BUSY_Pin LED_READY_Pin
                           SW_Pin STBY_RESET_Pin */
  GPIO_InitStruct.Pin = LED_SPARE_Pin|LED_ERROR_Pin|LED_BUSY_Pin|LED_READY_Pin
 8000da4:	233f      	movs	r3, #63	; 0x3f
 8000da6:	613b      	str	r3, [r7, #16]
                          |SW_Pin|STBY_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <MX_GPIO_Init+0x110>)
 8000dbc:	f000 fb34 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_GPIO_Init+0x114>)
 8000dd4:	f000 fb28 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : STCK_Pin CS_Pin */
  GPIO_InitStruct.Pin = STCK_Pin|CS_Pin;
 8000dd8:	2318      	movs	r3, #24
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_GPIO_Init+0x114>)
 8000df0:	f000 fb1a 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLAG_Pin BUSY_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin|BUSY_Pin;
 8000df4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_GPIO_Init+0x118>)
 8000e0e:	f000 fb0b 	bl	8001428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40011000 	.word	0x40011000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <recibir>:

/* USER CODE BEGIN 4 */
void recibir ()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	get_status[0] = 0b11010000;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <recibir+0x60>)
 8000e32:	22d0      	movs	r2, #208	; 0xd0
 8000e34:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <recibir+0x64>)
 8000e3c:	f000 fc78 	bl	8001730 <HAL_GPIO_WritePin>
	estado_spi_tx = HAL_SPI_Transmit(&hspi1, (uint8_t*) get_status, 1, 100);
 8000e40:	2364      	movs	r3, #100	; 0x64
 8000e42:	2201      	movs	r2, #1
 8000e44:	4911      	ldr	r1, [pc, #68]	; (8000e8c <recibir+0x60>)
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <recibir+0x68>)
 8000e48:	f001 fa52 	bl	80022f0 <HAL_SPI_Transmit>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <recibir+0x6c>)
 8000e52:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <recibir+0x64>)
 8000e5a:	f000 fc69 	bl	8001730 <HAL_GPIO_WritePin>
	//Escuchar respuesta del driver:
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2110      	movs	r1, #16
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <recibir+0x64>)
 8000e64:	f000 fc64 	bl	8001730 <HAL_GPIO_WritePin>
	estado_rx = HAL_SPI_Receive(&hspi1, rx_buffer, 1, 1000);
 8000e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	490b      	ldr	r1, [pc, #44]	; (8000e9c <recibir+0x70>)
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <recibir+0x68>)
 8000e72:	f001 fb80 	bl	8002576 <HAL_SPI_Receive>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <recibir+0x74>)
 8000e7c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2110      	movs	r1, #16
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <recibir+0x64>)
 8000e84:	f000 fc54 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000134 	.word	0x20000134
 8000e90:	40010800 	.word	0x40010800
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	2000012d 	.word	0x2000012d
 8000e9c:	20000130 	.word	0x20000130
 8000ea0:	2000012c 	.word	0x2000012c

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_SPI_MspInit+0x88>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d12f      	bne.n	8000f94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f64:	23a0      	movs	r3, #160	; 0xa0
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f78:	f000 fa56 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f90:	f000 fa4a 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40013000 	.word	0x40013000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <HAL_UART_MspInit+0x8c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d131      	bne.n	800102c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_UART_MspInit+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_UART_MspInit+0x90>)
 8000fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x90>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x90>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_UART_MspInit+0x90>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_MspInit+0x90>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <HAL_UART_MspInit+0x94>)
 800100e:	f000 fa0b 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_UART_MspInit+0x94>)
 8001028:	f000 f9fe 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013800 	.word	0x40013800
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001086:	f000 f8ab 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f001 ffea 	bl	8003098 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20010000 	.word	0x20010000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000138 	.word	0x20000138
 80010f8:	20000150 	.word	0x20000150

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff fff8 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800110e:	490c      	ldr	r1, [pc, #48]	; (8001140 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001124:	4c09      	ldr	r4, [pc, #36]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001132:	f001 ffb7 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001136:	f7ff f9f9 	bl	800052c <main>
  bx lr
 800113a:	4770      	bx	lr
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001144:	08003a9c 	.word	0x08003a9c
  ldr r2, =_sbss
 8001148:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800114c:	20000150 	.word	0x20000150

08001150 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x28>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f92b 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fe9e 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f935 	bl	800140e <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f90b 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x20>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x20>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000008 	.word	0x20000008
 8001200:	2000013c 	.word	0x2000013c

08001204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_GetTick+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	2000013c 	.word	0x2000013c

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff fff0 	bl	8001204 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffe0 	bl	8001204 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff49 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e169      	b.n	8001710 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800143c:	2201      	movs	r2, #1
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8158 	bne.w	800170a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a9a      	ldr	r2, [pc, #616]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d05e      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001464:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d875      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800146a:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d058      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001470:	4a96      	ldr	r2, [pc, #600]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d86f      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001476:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d052      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 800147c:	4a94      	ldr	r2, [pc, #592]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d869      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001482:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d04c      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001488:	4a92      	ldr	r2, [pc, #584]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d863      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800148e:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d046      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001494:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d85d      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800149a:	2b12      	cmp	r3, #18
 800149c:	d82a      	bhi.n	80014f4 <HAL_GPIO_Init+0xcc>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d859      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_GPIO_Init+0x80>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	08001523 	.word	0x08001523
 80014ac:	080014fd 	.word	0x080014fd
 80014b0:	0800150f 	.word	0x0800150f
 80014b4:	08001551 	.word	0x08001551
 80014b8:	08001557 	.word	0x08001557
 80014bc:	08001557 	.word	0x08001557
 80014c0:	08001557 	.word	0x08001557
 80014c4:	08001557 	.word	0x08001557
 80014c8:	08001557 	.word	0x08001557
 80014cc:	08001557 	.word	0x08001557
 80014d0:	08001557 	.word	0x08001557
 80014d4:	08001557 	.word	0x08001557
 80014d8:	08001557 	.word	0x08001557
 80014dc:	08001557 	.word	0x08001557
 80014e0:	08001557 	.word	0x08001557
 80014e4:	08001557 	.word	0x08001557
 80014e8:	08001557 	.word	0x08001557
 80014ec:	08001505 	.word	0x08001505
 80014f0:	08001519 	.word	0x08001519
 80014f4:	4a79      	ldr	r2, [pc, #484]	; (80016dc <HAL_GPIO_Init+0x2b4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fa:	e02c      	b.n	8001556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e029      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	3304      	adds	r3, #4
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e024      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3308      	adds	r3, #8
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e01f      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	330c      	adds	r3, #12
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e01a      	b.n	8001558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152a:	2304      	movs	r3, #4
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e013      	b.n	8001558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	611a      	str	r2, [r3, #16]
          break;
 8001542:	e009      	b.n	8001558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	615a      	str	r2, [r3, #20]
          break;
 800154e:	e003      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x130>
          break;
 8001556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d801      	bhi.n	8001562 <HAL_GPIO_Init+0x13a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_Init+0x13e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3304      	adds	r3, #4
 8001566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d802      	bhi.n	8001574 <HAL_GPIO_Init+0x14c>
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x152>
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	3b08      	subs	r3, #8
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	210f      	movs	r1, #15
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b1 	beq.w	800170a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a8:	4b4d      	ldr	r3, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_GPIO_Init+0x2c0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <HAL_GPIO_Init+0x1ec>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_GPIO_Init+0x2c4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00d      	beq.n	8001610 <HAL_GPIO_Init+0x1e8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <HAL_GPIO_Init+0x2c8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d007      	beq.n	800160c <HAL_GPIO_Init+0x1e4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_GPIO_Init+0x1e0>
 8001604:	2303      	movs	r3, #3
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001608:	2304      	movs	r3, #4
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001614:	2300      	movs	r3, #0
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001626:	492f      	ldr	r1, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	492c      	ldr	r1, [pc, #176]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4928      	ldr	r1, [pc, #160]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4922      	ldr	r1, [pc, #136]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	491e      	ldr	r1, [pc, #120]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4918      	ldr	r1, [pc, #96]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4914      	ldr	r1, [pc, #80]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d021      	beq.n	80016fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e021      	b.n	800170a <HAL_GPIO_Init+0x2e2>
 80016c6:	bf00      	nop
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10310000 	.word	0x10310000
 80016d0:	10220000 	.word	0x10220000
 80016d4:	10210000 	.word	0x10210000
 80016d8:	10120000 	.word	0x10120000
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	40011000 	.word	0x40011000
 80016f4:	40011400 	.word	0x40011400
 80016f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_GPIO_Init+0x304>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	43db      	mvns	r3, r3
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <HAL_GPIO_Init+0x304>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f ae8e 	bne.w	800143c <HAL_GPIO_Init+0x14>
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	372c      	adds	r7, #44	; 0x2c
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	611a      	str	r2, [r3, #16]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e304      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8087 	beq.w	800188e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001780:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b04      	cmp	r3, #4
 800178a:	d00c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800178c:	4b8f      	ldr	r3, [pc, #572]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d112      	bne.n	80017be <HAL_RCC_OscConfig+0x5e>
 8001798:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b89      	ldr	r3, [pc, #548]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06c      	beq.n	800188c <HAL_RCC_OscConfig+0x12c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d168      	bne.n	800188c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e2de      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x76>
 80017c8:	4b80      	ldr	r3, [pc, #512]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a7f      	ldr	r2, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e02e      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x98>
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a77      	ldr	r2, [pc, #476]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e01d      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0xbc>
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a71      	ldr	r2, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 800181c:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a6a      	ldr	r2, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a67      	ldr	r2, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800182e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fce2 	bl	8001204 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fcde 	bl	8001204 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e292      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0xe4>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fcce 	bl	8001204 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fcca 	bl	8001204 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e27e      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x10c>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d063      	beq.n	8001962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x18c>
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x176>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e252      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4939      	ldr	r1, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	e03a      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fc83 	bl	8001204 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fc7f 	bl	8001204 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e233      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fc62 	bl	8001204 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fc5e 	bl	8001204 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e212      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03a      	beq.n	80019e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d019      	beq.n	80019aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_RCC_OscConfig+0x274>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff fc42 	bl	8001204 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fc3e 	bl	8001204 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1f2      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 fc02 	bl	80021ac <RCC_Delay>
 80019a8:	e01c      	b.n	80019e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_OscConfig+0x274>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fc28 	bl	8001204 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b6:	e00f      	b.n	80019d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff fc24 	bl	8001204 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d908      	bls.n	80019d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1d8      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	42420000 	.word	0x42420000
 80019d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	4b9b      	ldr	r3, [pc, #620]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e9      	bne.n	80019b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a6 	beq.w	8001b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b94      	ldr	r3, [pc, #592]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a90      	ldr	r2, [pc, #576]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b8e      	ldr	r3, [pc, #568]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b8b      	ldr	r3, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x4ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x4ec>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a87      	ldr	r2, [pc, #540]	; (8001c4c <HAL_RCC_OscConfig+0x4ec>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fbe5 	bl	8001204 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fbe1 	bl	8001204 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e195      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x312>
 8001a64:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a77      	ldr	r2, [pc, #476]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x334>
 8001a7a:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a72      	ldr	r2, [pc, #456]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	e01c      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x356>
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a69      	ldr	r2, [pc, #420]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a66      	ldr	r2, [pc, #408]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e00b      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a63      	ldr	r2, [pc, #396]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a60      	ldr	r2, [pc, #384]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fb95 	bl	8001204 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff fb91 	bl	8001204 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e143      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ee      	beq.n	8001ade <HAL_RCC_OscConfig+0x37e>
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fb7f 	bl	8001204 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fb7b 	bl	8001204 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e12d      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 808c 	beq.w	8001c60 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d10e      	bne.n	8001b74 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d108      	bne.n	8001b74 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001b62:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e103      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d14e      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0ef      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_RCC_OscConfig+0x4f0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb2f 	bl	8001204 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001baa:	f7ff fb2b 	bl	8001204 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0df      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	491c      	ldr	r1, [pc, #112]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4918      	ldr	r1, [pc, #96]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_RCC_OscConfig+0x4f0>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fb07 	bl	8001204 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001bfa:	f7ff fb03 	bl	8001204 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b64      	cmp	r3, #100	; 0x64
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0b7      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x49a>
 8001c18:	e022      	b.n	8001c60 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_RCC_OscConfig+0x4e8>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_OscConfig+0x4f0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff faea 	bl	8001204 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001c32:	e00f      	b.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001c34:	f7ff fae6 	bl	8001204 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d908      	bls.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e09a      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e9      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8088 	beq.w	8001d7a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d068      	beq.n	8001d48 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d14d      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fabe 	bl	8001204 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff faba 	bl	8001204 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e06e      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4931      	ldr	r1, [pc, #196]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f023 020f 	bic.w	r2, r3, #15
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	492d      	ldr	r1, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	4927      	ldr	r1, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa87 	bl	8001204 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff fa83 	bl	8001204 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e037      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x59a>
 8001d18:	e02f      	b.n	8001d7a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x628>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fa70 	bl	8001204 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fa6c 	bl	8001204 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e020      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5c8>
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e013      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x624>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	42420060 	.word	0x42420060

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d0      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4965      	ldr	r1, [pc, #404]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b8      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	494d      	ldr	r1, [pc, #308]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d040      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d115      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e07f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e073      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06b      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4936      	ldr	r1, [pc, #216]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f9c2 	bl	8001204 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f9be 	bl	8001204 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e053      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d210      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4922      	ldr	r1, [pc, #136]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4916      	ldr	r1, [pc, #88]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1a:	f000 f821 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	490a      	ldr	r1, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	5ccb      	ldrb	r3, [r1, r3]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1cc>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1d0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f920 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08003a20 	.word	0x08003a20
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f64:	b092      	sub	sp, #72	; 0x48
 8001f66:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f70:	2300      	movs	r3, #0
 8001f72:	647b      	str	r3, [r7, #68]	; 0x44
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f84:	4b6b      	ldr	r3, [pc, #428]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d002      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d003      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001f98:	e0c3      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001f9e:	e0c3      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001faa:	5c9b      	ldrb	r3, [r3, r2]
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80ac 	beq.w	8002112 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001fba:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001fc8:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 808c 	beq.w	80020ee <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3302      	adds	r3, #2
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	4611      	mov	r1, r2
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	fb00 f203 	mul.w	r2, r0, r3
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	fb03 f301 	mul.w	r3, r3, r1
 800200e:	4413      	add	r3, r2
 8002010:	6a3a      	ldr	r2, [r7, #32]
 8002012:	fba2 4500 	umull	r4, r5, r2, r0
 8002016:	442b      	add	r3, r5
 8002018:	461d      	mov	r5, r3
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202c:	0150      	lsls	r0, r2, #5
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ebb2 0a04 	subs.w	sl, r2, r4
 8002036:	eb63 0b05 	sbc.w	fp, r3, r5
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002046:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800204a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800204e:	ebb2 080a 	subs.w	r8, r2, sl
 8002052:	eb63 090b 	sbc.w	r9, r3, fp
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800206a:	4690      	mov	r8, r2
 800206c:	4699      	mov	r9, r3
 800206e:	eb18 0304 	adds.w	r3, r8, r4
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	eb49 0305 	adc.w	r3, r9, r5
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002086:	4629      	mov	r1, r5
 8002088:	024b      	lsls	r3, r1, #9
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	4604      	mov	r4, r0
 8002090:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002094:	4601      	mov	r1, r0
 8002096:	024a      	lsls	r2, r1, #9
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	2200      	movs	r2, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	617a      	str	r2, [r7, #20]
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	2200      	movs	r2, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	60fa      	str	r2, [r7, #12]
 80020ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020b0:	4622      	mov	r2, r4
 80020b2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80020b6:	4645      	mov	r5, r8
 80020b8:	fb05 f202 	mul.w	r2, r5, r2
 80020bc:	46cc      	mov	ip, r9
 80020be:	4625      	mov	r5, r4
 80020c0:	461c      	mov	r4, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	fb03 f30c 	mul.w	r3, r3, ip
 80020c8:	4413      	add	r3, r2
 80020ca:	4622      	mov	r2, r4
 80020cc:	4644      	mov	r4, r8
 80020ce:	fba2 2404 	umull	r2, r4, r2, r4
 80020d2:	61fc      	str	r4, [r7, #28]
 80020d4:	61ba      	str	r2, [r7, #24]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e0:	f7fe f8a0 	bl	8000224 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
 80020ec:	e007      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80020f2:	fb03 f202 	mul.w	r2, r3, r2
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002100:	7b5b      	ldrb	r3, [r3, #13]
 8002102:	461a      	mov	r2, r3
 8002104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002106:	4293      	cmp	r3, r2
 8002108:	d108      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 800210a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	647b      	str	r3, [r7, #68]	; 0x44
 8002110:	e004      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 800211c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002120:	e002      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002124:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800212a:	4618      	mov	r0, r3
 800212c:	3748      	adds	r7, #72	; 0x48
 800212e:	46bd      	mov	sp, r7
 8002130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	08003a38 	.word	0x08003a38
 8002140:	08003a48 	.word	0x08003a48
 8002144:	003d0900 	.word	0x003d0900

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_RCC_GetHCLKFreq+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff2 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4903      	ldr	r1, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08003a30 	.word	0x08003a30

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002188:	f7ff ffde 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0adb      	lsrs	r3, r3, #11
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08003a30 	.word	0x08003a30

080021ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <RCC_Delay+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <RCC_Delay+0x38>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a5b      	lsrs	r3, r3, #9
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c8:	bf00      	nop
  }
  while (Delay --);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	60fa      	str	r2, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <RCC_Delay+0x1c>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000000 	.word	0x20000000
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e076      	b.n	80022e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d108      	bne.n	8002214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800220a:	d009      	beq.n	8002220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
 8002212:	e005      	b.n	8002220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fe6a 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	ea42 0103 	orr.w	r1, r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	0c1a      	lsrs	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f002 0204 	and.w	r2, r2, #4
 80022c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_SPI_Transmit+0x22>
 800230e:	2302      	movs	r3, #2
 8002310:	e12d      	b.n	800256e <HAL_SPI_Transmit+0x27e>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800231a:	f7fe ff73 	bl	8001204 <HAL_GetTick>
 800231e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d002      	beq.n	8002336 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002330:	2302      	movs	r3, #2
 8002332:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002334:	e116      	b.n	8002564 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Transmit+0x52>
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002346:	e10d      	b.n	8002564 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2203      	movs	r2, #3
 800234c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238e:	d10f      	bne.n	80023b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	d007      	beq.n	80023ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d6:	d14f      	bne.n	8002478 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_SPI_Transmit+0xf6>
 80023e0:	8afb      	ldrh	r3, [r7, #22]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d142      	bne.n	800246c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	1c9a      	adds	r2, r3, #2
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800240a:	e02f      	b.n	800246c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d112      	bne.n	8002440 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	881a      	ldrh	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	1c9a      	adds	r2, r3, #2
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	86da      	strh	r2, [r3, #54]	; 0x36
 800243e:	e015      	b.n	800246c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002440:	f7fe fee0 	bl	8001204 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d803      	bhi.n	8002458 <HAL_SPI_Transmit+0x168>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d102      	bne.n	800245e <HAL_SPI_Transmit+0x16e>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800246a:	e07b      	b.n	8002564 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ca      	bne.n	800240c <HAL_SPI_Transmit+0x11c>
 8002476:	e050      	b.n	800251a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_SPI_Transmit+0x196>
 8002480:	8afb      	ldrh	r3, [r7, #22]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d144      	bne.n	8002510 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024ac:	e030      	b.n	8002510 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d113      	bne.n	80024e4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80024e2:	e015      	b.n	8002510 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e4:	f7fe fe8e 	bl	8001204 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d803      	bhi.n	80024fc <HAL_SPI_Transmit+0x20c>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d102      	bne.n	8002502 <HAL_SPI_Transmit+0x212>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800250e:	e029      	b.n	8002564 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1c9      	bne.n	80024ae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fbcc 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	e003      	b.n	8002564 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800256c:	7ffb      	ldrb	r3, [r7, #31]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b088      	sub	sp, #32
 800257a:	af02      	add	r7, sp, #8
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800259a:	e0fb      	b.n	8002794 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a4:	d112      	bne.n	80025cc <HAL_SPI_Receive+0x56>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10e      	bne.n	80025cc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2204      	movs	r2, #4
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f8ef 	bl	80027a6 <HAL_SPI_TransmitReceive>
 80025c8:	4603      	mov	r3, r0
 80025ca:	e0e8      	b.n	800279e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_SPI_Receive+0x64>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0e1      	b.n	800279e <HAL_SPI_Receive+0x228>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025e2:	f7fe fe0f 	bl	8001204 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Receive+0x7e>
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025f8:	e0cc      	b.n	8002794 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2204      	movs	r2, #4
 80025fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	88fa      	ldrh	r2, [r7, #6]
 8002612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002640:	d10f      	bne.n	8002662 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d007      	beq.n	8002680 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d16a      	bne.n	800275e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002688:	e032      	b.n	80026f0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d115      	bne.n	80026c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f103 020c 	add.w	r2, r3, #12
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026c2:	e015      	b.n	80026f0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c4:	f7fe fd9e 	bl	8001204 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d803      	bhi.n	80026dc <HAL_SPI_Receive+0x166>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026da:	d102      	bne.n	80026e2 <HAL_SPI_Receive+0x16c>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026ee:	e051      	b.n	8002794 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1c7      	bne.n	800268a <HAL_SPI_Receive+0x114>
 80026fa:	e035      	b.n	8002768 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d113      	bne.n	8002732 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	b292      	uxth	r2, r2
 8002716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	1c9a      	adds	r2, r3, #2
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002730:	e015      	b.n	800275e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002732:	f7fe fd67 	bl	8001204 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d803      	bhi.n	800274a <HAL_SPI_Receive+0x1d4>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d102      	bne.n	8002750 <HAL_SPI_Receive+0x1da>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800275c:	e01a      	b.n	8002794 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1c9      	bne.n	80026fc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fa53 	bl	8002c18 <SPI_EndRxTransaction>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
 800278a:	e003      	b.n	8002794 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800279c:	7dfb      	ldrb	r3, [r7, #23]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08c      	sub	sp, #48	; 0x30
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x26>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e198      	b.n	8002afe <HAL_SPI_TransmitReceive+0x358>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027d4:	f7fe fd16 	bl	8001204 <HAL_GetTick>
 80027d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d00f      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x70>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027fc:	d107      	bne.n	800280e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <HAL_SPI_TransmitReceive+0x68>
 8002806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800280a:	2b04      	cmp	r3, #4
 800280c:	d003      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002814:	e16d      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x82>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x82>
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800282e:	e160      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b04      	cmp	r3, #4
 800283a:	d003      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2205      	movs	r2, #5
 8002840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d007      	beq.n	8002898 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a0:	d17c      	bne.n	800299c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x10a>
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d16a      	bne.n	8002986 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	1c9a      	adds	r2, r3, #2
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d4:	e057      	b.n	8002986 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_SPI_TransmitReceive+0x176>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_SPI_TransmitReceive+0x176>
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d113      	bne.n	800291c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	1c9a      	adds	r2, r3, #2
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d119      	bne.n	800295e <HAL_SPI_TransmitReceive+0x1b8>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d014      	beq.n	800295e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	b292      	uxth	r2, r2
 8002940:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	1c9a      	adds	r2, r3, #2
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800295a:	2301      	movs	r3, #1
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800295e:	f7fe fc51 	bl	8001204 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296a:	429a      	cmp	r2, r3
 800296c:	d80b      	bhi.n	8002986 <HAL_SPI_TransmitReceive+0x1e0>
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d007      	beq.n	8002986 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002984:	e0b5      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1a2      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x130>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d19d      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x130>
 800299a:	e080      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_SPI_TransmitReceive+0x204>
 80029a4:	8b7b      	ldrh	r3, [r7, #26]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d16f      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d0:	e05b      	b.n	8002a8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d11c      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x274>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <HAL_SPI_TransmitReceive+0x274>
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d114      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d119      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x2b6>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d014      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a5c:	f7fe fbd2 	bl	8001204 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d803      	bhi.n	8002a74 <HAL_SPI_TransmitReceive+0x2ce>
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d102      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x2d4>
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a88:	e033      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d19e      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x22c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d199      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f90a 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002aba:	e01a      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ae8:	e003      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002afa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3730      	adds	r7, #48	; 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b18:	f7fe fb74 	bl	8001204 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b28:	f7fe fb6c 	bl	8001204 <HAL_GetTick>
 8002b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	0d1b      	lsrs	r3, r3, #20
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b3e:	e054      	b.n	8002bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d050      	beq.n	8002bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b48:	f7fe fb5c 	bl	8001204 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d902      	bls.n	8002b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d13d      	bne.n	8002bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b76:	d111      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b80:	d004      	beq.n	8002b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d107      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d10f      	bne.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e017      	b.n	8002c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d19b      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000

08002c18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2c:	d111      	bne.n	8002c52 <SPI_EndRxTransaction+0x3a>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c36:	d004      	beq.n	8002c42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d107      	bne.n	8002c52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c50:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5a:	d117      	bne.n	8002c8c <SPI_EndRxTransaction+0x74>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d112      	bne.n	8002c8c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2101      	movs	r1, #1
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff ff49 	bl	8002b08 <SPI_WaitFlagStateUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01a      	beq.n	8002cb2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e013      	b.n	8002cb4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f7ff ff36 	bl	8002b08 <SPI_WaitFlagStateUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e000      	b.n	8002cb4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff ff18 	bl	8002b08 <SPI_WaitFlagStateUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e000      	b.n	8002cf0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e042      	b.n	8002d90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe f942 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f91d 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d16d      	bne.n	8002e94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_UART_Transmit+0x2c>
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e066      	b.n	8002e96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	; 0x21
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd6:	f7fe fa15 	bl	8001204 <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d108      	bne.n	8002e04 <HAL_UART_Transmit+0x6c>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	e003      	b.n	8002e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e0c:	e02a      	b.n	8002e64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f840 	bl	8002e9e <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e036      	b.n	8002e96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3302      	adds	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e007      	b.n	8002e56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1cf      	bne.n	8002e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2140      	movs	r1, #64	; 0x40
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f810 	bl	8002e9e <UART_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e006      	b.n	8002e96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b090      	sub	sp, #64	; 0x40
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eae:	e050      	b.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d04c      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0x30>
 8002ebe:	f7fe f9a1 	bl	8001204 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d241      	bcs.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eee:	637a      	str	r2, [r7, #52]	; 0x34
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e5      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	613b      	str	r3, [r7, #16]
   return(result);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f22:	623a      	str	r2, [r7, #32]
 8002f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	69f9      	ldr	r1, [r7, #28]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e5      	bne.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d09f      	beq.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3740      	adds	r7, #64	; 0x40
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fb6:	f023 030c 	bic.w	r3, r3, #12
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <UART_SetConfig+0x114>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7ff f8ce 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	e002      	b.n	8002ff2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7ff f8b6 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009a      	lsls	r2, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <UART_SetConfig+0x118>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	0119      	lsls	r1, r3, #4
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fbb2 f2f3 	udiv	r2, r2, r3
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <UART_SetConfig+0x118>)
 800302a:	fba3 0302 	umull	r0, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2064      	movs	r0, #100	; 0x64
 8003032:	fb00 f303 	mul.w	r3, r0, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	3332      	adds	r3, #50	; 0x32
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <UART_SetConfig+0x118>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003048:	4419      	add	r1, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <UART_SetConfig+0x118>)
 8003062:	fba3 0302 	umull	r0, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a07      	ldr	r2, [pc, #28]	; (8003094 <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	440a      	add	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40013800 	.word	0x40013800
 8003094:	51eb851f 	.word	0x51eb851f

08003098 <__errno>:
 8003098:	4b01      	ldr	r3, [pc, #4]	; (80030a0 <__errno+0x8>)
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2600      	movs	r6, #0
 80030a8:	4d0c      	ldr	r5, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	f000 fc9c 	bl	80039f0 <_init>
 80030b8:	2600      	movs	r6, #0
 80030ba:	4d0a      	ldr	r5, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08003a94 	.word	0x08003a94
 80030e0:	08003a94 	.word	0x08003a94
 80030e4:	08003a94 	.word	0x08003a94
 80030e8:	08003a98 	.word	0x08003a98

080030ec <memset>:
 80030ec:	4603      	mov	r3, r0
 80030ee:	4402      	add	r2, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <siprintf>:
 80030fc:	b40e      	push	{r1, r2, r3}
 80030fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003102:	b500      	push	{lr}
 8003104:	b09c      	sub	sp, #112	; 0x70
 8003106:	ab1d      	add	r3, sp, #116	; 0x74
 8003108:	9002      	str	r0, [sp, #8]
 800310a:	9006      	str	r0, [sp, #24]
 800310c:	9107      	str	r1, [sp, #28]
 800310e:	9104      	str	r1, [sp, #16]
 8003110:	4808      	ldr	r0, [pc, #32]	; (8003134 <siprintf+0x38>)
 8003112:	4909      	ldr	r1, [pc, #36]	; (8003138 <siprintf+0x3c>)
 8003114:	f853 2b04 	ldr.w	r2, [r3], #4
 8003118:	9105      	str	r1, [sp, #20]
 800311a:	6800      	ldr	r0, [r0, #0]
 800311c:	a902      	add	r1, sp, #8
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	f000 f868 	bl	80031f4 <_svfiprintf_r>
 8003124:	2200      	movs	r2, #0
 8003126:	9b02      	ldr	r3, [sp, #8]
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	b01c      	add	sp, #112	; 0x70
 800312c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003130:	b003      	add	sp, #12
 8003132:	4770      	bx	lr
 8003134:	2000000c 	.word	0x2000000c
 8003138:	ffff0208 	.word	0xffff0208

0800313c <__ssputs_r>:
 800313c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003140:	688e      	ldr	r6, [r1, #8]
 8003142:	4682      	mov	sl, r0
 8003144:	429e      	cmp	r6, r3
 8003146:	460c      	mov	r4, r1
 8003148:	4690      	mov	r8, r2
 800314a:	461f      	mov	r7, r3
 800314c:	d838      	bhi.n	80031c0 <__ssputs_r+0x84>
 800314e:	898a      	ldrh	r2, [r1, #12]
 8003150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003154:	d032      	beq.n	80031bc <__ssputs_r+0x80>
 8003156:	6825      	ldr	r5, [r4, #0]
 8003158:	6909      	ldr	r1, [r1, #16]
 800315a:	3301      	adds	r3, #1
 800315c:	eba5 0901 	sub.w	r9, r5, r1
 8003160:	6965      	ldr	r5, [r4, #20]
 8003162:	444b      	add	r3, r9
 8003164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800316c:	106d      	asrs	r5, r5, #1
 800316e:	429d      	cmp	r5, r3
 8003170:	bf38      	it	cc
 8003172:	461d      	movcc	r5, r3
 8003174:	0553      	lsls	r3, r2, #21
 8003176:	d531      	bpl.n	80031dc <__ssputs_r+0xa0>
 8003178:	4629      	mov	r1, r5
 800317a:	f000 fb6f 	bl	800385c <_malloc_r>
 800317e:	4606      	mov	r6, r0
 8003180:	b950      	cbnz	r0, 8003198 <__ssputs_r+0x5c>
 8003182:	230c      	movs	r3, #12
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f8ca 3000 	str.w	r3, [sl]
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003198:	464a      	mov	r2, r9
 800319a:	6921      	ldr	r1, [r4, #16]
 800319c:	f000 face 	bl	800373c <memcpy>
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031aa:	81a3      	strh	r3, [r4, #12]
 80031ac:	6126      	str	r6, [r4, #16]
 80031ae:	444e      	add	r6, r9
 80031b0:	6026      	str	r6, [r4, #0]
 80031b2:	463e      	mov	r6, r7
 80031b4:	6165      	str	r5, [r4, #20]
 80031b6:	eba5 0509 	sub.w	r5, r5, r9
 80031ba:	60a5      	str	r5, [r4, #8]
 80031bc:	42be      	cmp	r6, r7
 80031be:	d900      	bls.n	80031c2 <__ssputs_r+0x86>
 80031c0:	463e      	mov	r6, r7
 80031c2:	4632      	mov	r2, r6
 80031c4:	4641      	mov	r1, r8
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	f000 fac6 	bl	8003758 <memmove>
 80031cc:	68a3      	ldr	r3, [r4, #8]
 80031ce:	2000      	movs	r0, #0
 80031d0:	1b9b      	subs	r3, r3, r6
 80031d2:	60a3      	str	r3, [r4, #8]
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	4433      	add	r3, r6
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	e7db      	b.n	8003194 <__ssputs_r+0x58>
 80031dc:	462a      	mov	r2, r5
 80031de:	f000 fbb1 	bl	8003944 <_realloc_r>
 80031e2:	4606      	mov	r6, r0
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d1e1      	bne.n	80031ac <__ssputs_r+0x70>
 80031e8:	4650      	mov	r0, sl
 80031ea:	6921      	ldr	r1, [r4, #16]
 80031ec:	f000 face 	bl	800378c <_free_r>
 80031f0:	e7c7      	b.n	8003182 <__ssputs_r+0x46>
	...

080031f4 <_svfiprintf_r>:
 80031f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f8:	4698      	mov	r8, r3
 80031fa:	898b      	ldrh	r3, [r1, #12]
 80031fc:	4607      	mov	r7, r0
 80031fe:	061b      	lsls	r3, r3, #24
 8003200:	460d      	mov	r5, r1
 8003202:	4614      	mov	r4, r2
 8003204:	b09d      	sub	sp, #116	; 0x74
 8003206:	d50e      	bpl.n	8003226 <_svfiprintf_r+0x32>
 8003208:	690b      	ldr	r3, [r1, #16]
 800320a:	b963      	cbnz	r3, 8003226 <_svfiprintf_r+0x32>
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	f000 fb25 	bl	800385c <_malloc_r>
 8003212:	6028      	str	r0, [r5, #0]
 8003214:	6128      	str	r0, [r5, #16]
 8003216:	b920      	cbnz	r0, 8003222 <_svfiprintf_r+0x2e>
 8003218:	230c      	movs	r3, #12
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	e0d1      	b.n	80033c6 <_svfiprintf_r+0x1d2>
 8003222:	2340      	movs	r3, #64	; 0x40
 8003224:	616b      	str	r3, [r5, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	9309      	str	r3, [sp, #36]	; 0x24
 800322a:	2320      	movs	r3, #32
 800322c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003230:	2330      	movs	r3, #48	; 0x30
 8003232:	f04f 0901 	mov.w	r9, #1
 8003236:	f8cd 800c 	str.w	r8, [sp, #12]
 800323a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033e0 <_svfiprintf_r+0x1ec>
 800323e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003242:	4623      	mov	r3, r4
 8003244:	469a      	mov	sl, r3
 8003246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800324a:	b10a      	cbz	r2, 8003250 <_svfiprintf_r+0x5c>
 800324c:	2a25      	cmp	r2, #37	; 0x25
 800324e:	d1f9      	bne.n	8003244 <_svfiprintf_r+0x50>
 8003250:	ebba 0b04 	subs.w	fp, sl, r4
 8003254:	d00b      	beq.n	800326e <_svfiprintf_r+0x7a>
 8003256:	465b      	mov	r3, fp
 8003258:	4622      	mov	r2, r4
 800325a:	4629      	mov	r1, r5
 800325c:	4638      	mov	r0, r7
 800325e:	f7ff ff6d 	bl	800313c <__ssputs_r>
 8003262:	3001      	adds	r0, #1
 8003264:	f000 80aa 	beq.w	80033bc <_svfiprintf_r+0x1c8>
 8003268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800326a:	445a      	add	r2, fp
 800326c:	9209      	str	r2, [sp, #36]	; 0x24
 800326e:	f89a 3000 	ldrb.w	r3, [sl]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a2 	beq.w	80033bc <_svfiprintf_r+0x1c8>
 8003278:	2300      	movs	r3, #0
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003282:	f10a 0a01 	add.w	sl, sl, #1
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	9307      	str	r3, [sp, #28]
 800328a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800328e:	931a      	str	r3, [sp, #104]	; 0x68
 8003290:	4654      	mov	r4, sl
 8003292:	2205      	movs	r2, #5
 8003294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003298:	4851      	ldr	r0, [pc, #324]	; (80033e0 <_svfiprintf_r+0x1ec>)
 800329a:	f000 fa41 	bl	8003720 <memchr>
 800329e:	9a04      	ldr	r2, [sp, #16]
 80032a0:	b9d8      	cbnz	r0, 80032da <_svfiprintf_r+0xe6>
 80032a2:	06d0      	lsls	r0, r2, #27
 80032a4:	bf44      	itt	mi
 80032a6:	2320      	movmi	r3, #32
 80032a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ac:	0711      	lsls	r1, r2, #28
 80032ae:	bf44      	itt	mi
 80032b0:	232b      	movmi	r3, #43	; 0x2b
 80032b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032b6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ba:	2b2a      	cmp	r3, #42	; 0x2a
 80032bc:	d015      	beq.n	80032ea <_svfiprintf_r+0xf6>
 80032be:	4654      	mov	r4, sl
 80032c0:	2000      	movs	r0, #0
 80032c2:	f04f 0c0a 	mov.w	ip, #10
 80032c6:	9a07      	ldr	r2, [sp, #28]
 80032c8:	4621      	mov	r1, r4
 80032ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ce:	3b30      	subs	r3, #48	; 0x30
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d94e      	bls.n	8003372 <_svfiprintf_r+0x17e>
 80032d4:	b1b0      	cbz	r0, 8003304 <_svfiprintf_r+0x110>
 80032d6:	9207      	str	r2, [sp, #28]
 80032d8:	e014      	b.n	8003304 <_svfiprintf_r+0x110>
 80032da:	eba0 0308 	sub.w	r3, r0, r8
 80032de:	fa09 f303 	lsl.w	r3, r9, r3
 80032e2:	4313      	orrs	r3, r2
 80032e4:	46a2      	mov	sl, r4
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	e7d2      	b.n	8003290 <_svfiprintf_r+0x9c>
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	1d19      	adds	r1, r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	9103      	str	r1, [sp, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bfbb      	ittet	lt
 80032f6:	425b      	neglt	r3, r3
 80032f8:	f042 0202 	orrlt.w	r2, r2, #2
 80032fc:	9307      	strge	r3, [sp, #28]
 80032fe:	9307      	strlt	r3, [sp, #28]
 8003300:	bfb8      	it	lt
 8003302:	9204      	strlt	r2, [sp, #16]
 8003304:	7823      	ldrb	r3, [r4, #0]
 8003306:	2b2e      	cmp	r3, #46	; 0x2e
 8003308:	d10c      	bne.n	8003324 <_svfiprintf_r+0x130>
 800330a:	7863      	ldrb	r3, [r4, #1]
 800330c:	2b2a      	cmp	r3, #42	; 0x2a
 800330e:	d135      	bne.n	800337c <_svfiprintf_r+0x188>
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	3402      	adds	r4, #2
 8003314:	1d1a      	adds	r2, r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	9203      	str	r2, [sp, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003322:	9305      	str	r3, [sp, #20]
 8003324:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80033e4 <_svfiprintf_r+0x1f0>
 8003328:	2203      	movs	r2, #3
 800332a:	4650      	mov	r0, sl
 800332c:	7821      	ldrb	r1, [r4, #0]
 800332e:	f000 f9f7 	bl	8003720 <memchr>
 8003332:	b140      	cbz	r0, 8003346 <_svfiprintf_r+0x152>
 8003334:	2340      	movs	r3, #64	; 0x40
 8003336:	eba0 000a 	sub.w	r0, r0, sl
 800333a:	fa03 f000 	lsl.w	r0, r3, r0
 800333e:	9b04      	ldr	r3, [sp, #16]
 8003340:	3401      	adds	r4, #1
 8003342:	4303      	orrs	r3, r0
 8003344:	9304      	str	r3, [sp, #16]
 8003346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800334a:	2206      	movs	r2, #6
 800334c:	4826      	ldr	r0, [pc, #152]	; (80033e8 <_svfiprintf_r+0x1f4>)
 800334e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003352:	f000 f9e5 	bl	8003720 <memchr>
 8003356:	2800      	cmp	r0, #0
 8003358:	d038      	beq.n	80033cc <_svfiprintf_r+0x1d8>
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <_svfiprintf_r+0x1f8>)
 800335c:	bb1b      	cbnz	r3, 80033a6 <_svfiprintf_r+0x1b2>
 800335e:	9b03      	ldr	r3, [sp, #12]
 8003360:	3307      	adds	r3, #7
 8003362:	f023 0307 	bic.w	r3, r3, #7
 8003366:	3308      	adds	r3, #8
 8003368:	9303      	str	r3, [sp, #12]
 800336a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800336c:	4433      	add	r3, r6
 800336e:	9309      	str	r3, [sp, #36]	; 0x24
 8003370:	e767      	b.n	8003242 <_svfiprintf_r+0x4e>
 8003372:	460c      	mov	r4, r1
 8003374:	2001      	movs	r0, #1
 8003376:	fb0c 3202 	mla	r2, ip, r2, r3
 800337a:	e7a5      	b.n	80032c8 <_svfiprintf_r+0xd4>
 800337c:	2300      	movs	r3, #0
 800337e:	f04f 0c0a 	mov.w	ip, #10
 8003382:	4619      	mov	r1, r3
 8003384:	3401      	adds	r4, #1
 8003386:	9305      	str	r3, [sp, #20]
 8003388:	4620      	mov	r0, r4
 800338a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800338e:	3a30      	subs	r2, #48	; 0x30
 8003390:	2a09      	cmp	r2, #9
 8003392:	d903      	bls.n	800339c <_svfiprintf_r+0x1a8>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0c5      	beq.n	8003324 <_svfiprintf_r+0x130>
 8003398:	9105      	str	r1, [sp, #20]
 800339a:	e7c3      	b.n	8003324 <_svfiprintf_r+0x130>
 800339c:	4604      	mov	r4, r0
 800339e:	2301      	movs	r3, #1
 80033a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033a4:	e7f0      	b.n	8003388 <_svfiprintf_r+0x194>
 80033a6:	ab03      	add	r3, sp, #12
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	462a      	mov	r2, r5
 80033ac:	4638      	mov	r0, r7
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <_svfiprintf_r+0x1fc>)
 80033b0:	a904      	add	r1, sp, #16
 80033b2:	f3af 8000 	nop.w
 80033b6:	1c42      	adds	r2, r0, #1
 80033b8:	4606      	mov	r6, r0
 80033ba:	d1d6      	bne.n	800336a <_svfiprintf_r+0x176>
 80033bc:	89ab      	ldrh	r3, [r5, #12]
 80033be:	065b      	lsls	r3, r3, #25
 80033c0:	f53f af2c 	bmi.w	800321c <_svfiprintf_r+0x28>
 80033c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033c6:	b01d      	add	sp, #116	; 0x74
 80033c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033cc:	ab03      	add	r3, sp, #12
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4638      	mov	r0, r7
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <_svfiprintf_r+0x1fc>)
 80033d6:	a904      	add	r1, sp, #16
 80033d8:	f000 f87c 	bl	80034d4 <_printf_i>
 80033dc:	e7eb      	b.n	80033b6 <_svfiprintf_r+0x1c2>
 80033de:	bf00      	nop
 80033e0:	08003a58 	.word	0x08003a58
 80033e4:	08003a5e 	.word	0x08003a5e
 80033e8:	08003a62 	.word	0x08003a62
 80033ec:	00000000 	.word	0x00000000
 80033f0:	0800313d 	.word	0x0800313d

080033f4 <_printf_common>:
 80033f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f8:	4616      	mov	r6, r2
 80033fa:	4699      	mov	r9, r3
 80033fc:	688a      	ldr	r2, [r1, #8]
 80033fe:	690b      	ldr	r3, [r1, #16]
 8003400:	4607      	mov	r7, r0
 8003402:	4293      	cmp	r3, r2
 8003404:	bfb8      	it	lt
 8003406:	4613      	movlt	r3, r2
 8003408:	6033      	str	r3, [r6, #0]
 800340a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800340e:	460c      	mov	r4, r1
 8003410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003414:	b10a      	cbz	r2, 800341a <_printf_common+0x26>
 8003416:	3301      	adds	r3, #1
 8003418:	6033      	str	r3, [r6, #0]
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	0699      	lsls	r1, r3, #26
 800341e:	bf42      	ittt	mi
 8003420:	6833      	ldrmi	r3, [r6, #0]
 8003422:	3302      	addmi	r3, #2
 8003424:	6033      	strmi	r3, [r6, #0]
 8003426:	6825      	ldr	r5, [r4, #0]
 8003428:	f015 0506 	ands.w	r5, r5, #6
 800342c:	d106      	bne.n	800343c <_printf_common+0x48>
 800342e:	f104 0a19 	add.w	sl, r4, #25
 8003432:	68e3      	ldr	r3, [r4, #12]
 8003434:	6832      	ldr	r2, [r6, #0]
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	42ab      	cmp	r3, r5
 800343a:	dc28      	bgt.n	800348e <_printf_common+0x9a>
 800343c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003440:	1e13      	subs	r3, r2, #0
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	bf18      	it	ne
 8003446:	2301      	movne	r3, #1
 8003448:	0692      	lsls	r2, r2, #26
 800344a:	d42d      	bmi.n	80034a8 <_printf_common+0xb4>
 800344c:	4649      	mov	r1, r9
 800344e:	4638      	mov	r0, r7
 8003450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003454:	47c0      	blx	r8
 8003456:	3001      	adds	r0, #1
 8003458:	d020      	beq.n	800349c <_printf_common+0xa8>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	68e5      	ldr	r5, [r4, #12]
 800345e:	f003 0306 	and.w	r3, r3, #6
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf18      	it	ne
 8003466:	2500      	movne	r5, #0
 8003468:	6832      	ldr	r2, [r6, #0]
 800346a:	f04f 0600 	mov.w	r6, #0
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	bf08      	it	eq
 8003472:	1aad      	subeq	r5, r5, r2
 8003474:	6922      	ldr	r2, [r4, #16]
 8003476:	bf08      	it	eq
 8003478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800347c:	4293      	cmp	r3, r2
 800347e:	bfc4      	itt	gt
 8003480:	1a9b      	subgt	r3, r3, r2
 8003482:	18ed      	addgt	r5, r5, r3
 8003484:	341a      	adds	r4, #26
 8003486:	42b5      	cmp	r5, r6
 8003488:	d11a      	bne.n	80034c0 <_printf_common+0xcc>
 800348a:	2000      	movs	r0, #0
 800348c:	e008      	b.n	80034a0 <_printf_common+0xac>
 800348e:	2301      	movs	r3, #1
 8003490:	4652      	mov	r2, sl
 8003492:	4649      	mov	r1, r9
 8003494:	4638      	mov	r0, r7
 8003496:	47c0      	blx	r8
 8003498:	3001      	adds	r0, #1
 800349a:	d103      	bne.n	80034a4 <_printf_common+0xb0>
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a4:	3501      	adds	r5, #1
 80034a6:	e7c4      	b.n	8003432 <_printf_common+0x3e>
 80034a8:	2030      	movs	r0, #48	; 0x30
 80034aa:	18e1      	adds	r1, r4, r3
 80034ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034b6:	4422      	add	r2, r4
 80034b8:	3302      	adds	r3, #2
 80034ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034be:	e7c5      	b.n	800344c <_printf_common+0x58>
 80034c0:	2301      	movs	r3, #1
 80034c2:	4622      	mov	r2, r4
 80034c4:	4649      	mov	r1, r9
 80034c6:	4638      	mov	r0, r7
 80034c8:	47c0      	blx	r8
 80034ca:	3001      	adds	r0, #1
 80034cc:	d0e6      	beq.n	800349c <_printf_common+0xa8>
 80034ce:	3601      	adds	r6, #1
 80034d0:	e7d9      	b.n	8003486 <_printf_common+0x92>
	...

080034d4 <_printf_i>:
 80034d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d8:	7e0f      	ldrb	r7, [r1, #24]
 80034da:	4691      	mov	r9, r2
 80034dc:	2f78      	cmp	r7, #120	; 0x78
 80034de:	4680      	mov	r8, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	469a      	mov	sl, r3
 80034e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034ea:	d807      	bhi.n	80034fc <_printf_i+0x28>
 80034ec:	2f62      	cmp	r7, #98	; 0x62
 80034ee:	d80a      	bhi.n	8003506 <_printf_i+0x32>
 80034f0:	2f00      	cmp	r7, #0
 80034f2:	f000 80d9 	beq.w	80036a8 <_printf_i+0x1d4>
 80034f6:	2f58      	cmp	r7, #88	; 0x58
 80034f8:	f000 80a4 	beq.w	8003644 <_printf_i+0x170>
 80034fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003504:	e03a      	b.n	800357c <_printf_i+0xa8>
 8003506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800350a:	2b15      	cmp	r3, #21
 800350c:	d8f6      	bhi.n	80034fc <_printf_i+0x28>
 800350e:	a101      	add	r1, pc, #4	; (adr r1, 8003514 <_printf_i+0x40>)
 8003510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003514:	0800356d 	.word	0x0800356d
 8003518:	08003581 	.word	0x08003581
 800351c:	080034fd 	.word	0x080034fd
 8003520:	080034fd 	.word	0x080034fd
 8003524:	080034fd 	.word	0x080034fd
 8003528:	080034fd 	.word	0x080034fd
 800352c:	08003581 	.word	0x08003581
 8003530:	080034fd 	.word	0x080034fd
 8003534:	080034fd 	.word	0x080034fd
 8003538:	080034fd 	.word	0x080034fd
 800353c:	080034fd 	.word	0x080034fd
 8003540:	0800368f 	.word	0x0800368f
 8003544:	080035b1 	.word	0x080035b1
 8003548:	08003671 	.word	0x08003671
 800354c:	080034fd 	.word	0x080034fd
 8003550:	080034fd 	.word	0x080034fd
 8003554:	080036b1 	.word	0x080036b1
 8003558:	080034fd 	.word	0x080034fd
 800355c:	080035b1 	.word	0x080035b1
 8003560:	080034fd 	.word	0x080034fd
 8003564:	080034fd 	.word	0x080034fd
 8003568:	08003679 	.word	0x08003679
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	1d1a      	adds	r2, r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	602a      	str	r2, [r5, #0]
 8003574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800357c:	2301      	movs	r3, #1
 800357e:	e0a4      	b.n	80036ca <_printf_i+0x1f6>
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	6829      	ldr	r1, [r5, #0]
 8003584:	0606      	lsls	r6, r0, #24
 8003586:	f101 0304 	add.w	r3, r1, #4
 800358a:	d50a      	bpl.n	80035a2 <_printf_i+0xce>
 800358c:	680e      	ldr	r6, [r1, #0]
 800358e:	602b      	str	r3, [r5, #0]
 8003590:	2e00      	cmp	r6, #0
 8003592:	da03      	bge.n	800359c <_printf_i+0xc8>
 8003594:	232d      	movs	r3, #45	; 0x2d
 8003596:	4276      	negs	r6, r6
 8003598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800359c:	230a      	movs	r3, #10
 800359e:	485e      	ldr	r0, [pc, #376]	; (8003718 <_printf_i+0x244>)
 80035a0:	e019      	b.n	80035d6 <_printf_i+0x102>
 80035a2:	680e      	ldr	r6, [r1, #0]
 80035a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035a8:	602b      	str	r3, [r5, #0]
 80035aa:	bf18      	it	ne
 80035ac:	b236      	sxthne	r6, r6
 80035ae:	e7ef      	b.n	8003590 <_printf_i+0xbc>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	1d19      	adds	r1, r3, #4
 80035b6:	6029      	str	r1, [r5, #0]
 80035b8:	0601      	lsls	r1, r0, #24
 80035ba:	d501      	bpl.n	80035c0 <_printf_i+0xec>
 80035bc:	681e      	ldr	r6, [r3, #0]
 80035be:	e002      	b.n	80035c6 <_printf_i+0xf2>
 80035c0:	0646      	lsls	r6, r0, #25
 80035c2:	d5fb      	bpl.n	80035bc <_printf_i+0xe8>
 80035c4:	881e      	ldrh	r6, [r3, #0]
 80035c6:	2f6f      	cmp	r7, #111	; 0x6f
 80035c8:	bf0c      	ite	eq
 80035ca:	2308      	moveq	r3, #8
 80035cc:	230a      	movne	r3, #10
 80035ce:	4852      	ldr	r0, [pc, #328]	; (8003718 <_printf_i+0x244>)
 80035d0:	2100      	movs	r1, #0
 80035d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035d6:	6865      	ldr	r5, [r4, #4]
 80035d8:	2d00      	cmp	r5, #0
 80035da:	bfa8      	it	ge
 80035dc:	6821      	ldrge	r1, [r4, #0]
 80035de:	60a5      	str	r5, [r4, #8]
 80035e0:	bfa4      	itt	ge
 80035e2:	f021 0104 	bicge.w	r1, r1, #4
 80035e6:	6021      	strge	r1, [r4, #0]
 80035e8:	b90e      	cbnz	r6, 80035ee <_printf_i+0x11a>
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	d04d      	beq.n	800368a <_printf_i+0x1b6>
 80035ee:	4615      	mov	r5, r2
 80035f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80035f4:	fb03 6711 	mls	r7, r3, r1, r6
 80035f8:	5dc7      	ldrb	r7, [r0, r7]
 80035fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035fe:	4637      	mov	r7, r6
 8003600:	42bb      	cmp	r3, r7
 8003602:	460e      	mov	r6, r1
 8003604:	d9f4      	bls.n	80035f0 <_printf_i+0x11c>
 8003606:	2b08      	cmp	r3, #8
 8003608:	d10b      	bne.n	8003622 <_printf_i+0x14e>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	07de      	lsls	r6, r3, #31
 800360e:	d508      	bpl.n	8003622 <_printf_i+0x14e>
 8003610:	6923      	ldr	r3, [r4, #16]
 8003612:	6861      	ldr	r1, [r4, #4]
 8003614:	4299      	cmp	r1, r3
 8003616:	bfde      	ittt	le
 8003618:	2330      	movle	r3, #48	; 0x30
 800361a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800361e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003622:	1b52      	subs	r2, r2, r5
 8003624:	6122      	str	r2, [r4, #16]
 8003626:	464b      	mov	r3, r9
 8003628:	4621      	mov	r1, r4
 800362a:	4640      	mov	r0, r8
 800362c:	f8cd a000 	str.w	sl, [sp]
 8003630:	aa03      	add	r2, sp, #12
 8003632:	f7ff fedf 	bl	80033f4 <_printf_common>
 8003636:	3001      	adds	r0, #1
 8003638:	d14c      	bne.n	80036d4 <_printf_i+0x200>
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	b004      	add	sp, #16
 8003640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003644:	4834      	ldr	r0, [pc, #208]	; (8003718 <_printf_i+0x244>)
 8003646:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800364a:	6829      	ldr	r1, [r5, #0]
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003652:	6029      	str	r1, [r5, #0]
 8003654:	061d      	lsls	r5, r3, #24
 8003656:	d514      	bpl.n	8003682 <_printf_i+0x1ae>
 8003658:	07df      	lsls	r7, r3, #31
 800365a:	bf44      	itt	mi
 800365c:	f043 0320 	orrmi.w	r3, r3, #32
 8003660:	6023      	strmi	r3, [r4, #0]
 8003662:	b91e      	cbnz	r6, 800366c <_printf_i+0x198>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	f023 0320 	bic.w	r3, r3, #32
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	2310      	movs	r3, #16
 800366e:	e7af      	b.n	80035d0 <_printf_i+0xfc>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	f043 0320 	orr.w	r3, r3, #32
 8003676:	6023      	str	r3, [r4, #0]
 8003678:	2378      	movs	r3, #120	; 0x78
 800367a:	4828      	ldr	r0, [pc, #160]	; (800371c <_printf_i+0x248>)
 800367c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003680:	e7e3      	b.n	800364a <_printf_i+0x176>
 8003682:	0659      	lsls	r1, r3, #25
 8003684:	bf48      	it	mi
 8003686:	b2b6      	uxthmi	r6, r6
 8003688:	e7e6      	b.n	8003658 <_printf_i+0x184>
 800368a:	4615      	mov	r5, r2
 800368c:	e7bb      	b.n	8003606 <_printf_i+0x132>
 800368e:	682b      	ldr	r3, [r5, #0]
 8003690:	6826      	ldr	r6, [r4, #0]
 8003692:	1d18      	adds	r0, r3, #4
 8003694:	6961      	ldr	r1, [r4, #20]
 8003696:	6028      	str	r0, [r5, #0]
 8003698:	0635      	lsls	r5, r6, #24
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	d501      	bpl.n	80036a2 <_printf_i+0x1ce>
 800369e:	6019      	str	r1, [r3, #0]
 80036a0:	e002      	b.n	80036a8 <_printf_i+0x1d4>
 80036a2:	0670      	lsls	r0, r6, #25
 80036a4:	d5fb      	bpl.n	800369e <_printf_i+0x1ca>
 80036a6:	8019      	strh	r1, [r3, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	4615      	mov	r5, r2
 80036ac:	6123      	str	r3, [r4, #16]
 80036ae:	e7ba      	b.n	8003626 <_printf_i+0x152>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	2100      	movs	r1, #0
 80036b4:	1d1a      	adds	r2, r3, #4
 80036b6:	602a      	str	r2, [r5, #0]
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	6862      	ldr	r2, [r4, #4]
 80036bc:	4628      	mov	r0, r5
 80036be:	f000 f82f 	bl	8003720 <memchr>
 80036c2:	b108      	cbz	r0, 80036c8 <_printf_i+0x1f4>
 80036c4:	1b40      	subs	r0, r0, r5
 80036c6:	6060      	str	r0, [r4, #4]
 80036c8:	6863      	ldr	r3, [r4, #4]
 80036ca:	6123      	str	r3, [r4, #16]
 80036cc:	2300      	movs	r3, #0
 80036ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d2:	e7a8      	b.n	8003626 <_printf_i+0x152>
 80036d4:	462a      	mov	r2, r5
 80036d6:	4649      	mov	r1, r9
 80036d8:	4640      	mov	r0, r8
 80036da:	6923      	ldr	r3, [r4, #16]
 80036dc:	47d0      	blx	sl
 80036de:	3001      	adds	r0, #1
 80036e0:	d0ab      	beq.n	800363a <_printf_i+0x166>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	079b      	lsls	r3, r3, #30
 80036e6:	d413      	bmi.n	8003710 <_printf_i+0x23c>
 80036e8:	68e0      	ldr	r0, [r4, #12]
 80036ea:	9b03      	ldr	r3, [sp, #12]
 80036ec:	4298      	cmp	r0, r3
 80036ee:	bfb8      	it	lt
 80036f0:	4618      	movlt	r0, r3
 80036f2:	e7a4      	b.n	800363e <_printf_i+0x16a>
 80036f4:	2301      	movs	r3, #1
 80036f6:	4632      	mov	r2, r6
 80036f8:	4649      	mov	r1, r9
 80036fa:	4640      	mov	r0, r8
 80036fc:	47d0      	blx	sl
 80036fe:	3001      	adds	r0, #1
 8003700:	d09b      	beq.n	800363a <_printf_i+0x166>
 8003702:	3501      	adds	r5, #1
 8003704:	68e3      	ldr	r3, [r4, #12]
 8003706:	9903      	ldr	r1, [sp, #12]
 8003708:	1a5b      	subs	r3, r3, r1
 800370a:	42ab      	cmp	r3, r5
 800370c:	dcf2      	bgt.n	80036f4 <_printf_i+0x220>
 800370e:	e7eb      	b.n	80036e8 <_printf_i+0x214>
 8003710:	2500      	movs	r5, #0
 8003712:	f104 0619 	add.w	r6, r4, #25
 8003716:	e7f5      	b.n	8003704 <_printf_i+0x230>
 8003718:	08003a69 	.word	0x08003a69
 800371c:	08003a7a 	.word	0x08003a7a

08003720 <memchr>:
 8003720:	4603      	mov	r3, r0
 8003722:	b510      	push	{r4, lr}
 8003724:	b2c9      	uxtb	r1, r1
 8003726:	4402      	add	r2, r0
 8003728:	4293      	cmp	r3, r2
 800372a:	4618      	mov	r0, r3
 800372c:	d101      	bne.n	8003732 <memchr+0x12>
 800372e:	2000      	movs	r0, #0
 8003730:	e003      	b.n	800373a <memchr+0x1a>
 8003732:	7804      	ldrb	r4, [r0, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	428c      	cmp	r4, r1
 8003738:	d1f6      	bne.n	8003728 <memchr+0x8>
 800373a:	bd10      	pop	{r4, pc}

0800373c <memcpy>:
 800373c:	440a      	add	r2, r1
 800373e:	4291      	cmp	r1, r2
 8003740:	f100 33ff 	add.w	r3, r0, #4294967295
 8003744:	d100      	bne.n	8003748 <memcpy+0xc>
 8003746:	4770      	bx	lr
 8003748:	b510      	push	{r4, lr}
 800374a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800374e:	4291      	cmp	r1, r2
 8003750:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003754:	d1f9      	bne.n	800374a <memcpy+0xe>
 8003756:	bd10      	pop	{r4, pc}

08003758 <memmove>:
 8003758:	4288      	cmp	r0, r1
 800375a:	b510      	push	{r4, lr}
 800375c:	eb01 0402 	add.w	r4, r1, r2
 8003760:	d902      	bls.n	8003768 <memmove+0x10>
 8003762:	4284      	cmp	r4, r0
 8003764:	4623      	mov	r3, r4
 8003766:	d807      	bhi.n	8003778 <memmove+0x20>
 8003768:	1e43      	subs	r3, r0, #1
 800376a:	42a1      	cmp	r1, r4
 800376c:	d008      	beq.n	8003780 <memmove+0x28>
 800376e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003776:	e7f8      	b.n	800376a <memmove+0x12>
 8003778:	4601      	mov	r1, r0
 800377a:	4402      	add	r2, r0
 800377c:	428a      	cmp	r2, r1
 800377e:	d100      	bne.n	8003782 <memmove+0x2a>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800378a:	e7f7      	b.n	800377c <memmove+0x24>

0800378c <_free_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4605      	mov	r5, r0
 8003790:	2900      	cmp	r1, #0
 8003792:	d040      	beq.n	8003816 <_free_r+0x8a>
 8003794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003798:	1f0c      	subs	r4, r1, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfb8      	it	lt
 800379e:	18e4      	addlt	r4, r4, r3
 80037a0:	f000 f910 	bl	80039c4 <__malloc_lock>
 80037a4:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <_free_r+0x8c>)
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	b933      	cbnz	r3, 80037b8 <_free_r+0x2c>
 80037aa:	6063      	str	r3, [r4, #4]
 80037ac:	6014      	str	r4, [r2, #0]
 80037ae:	4628      	mov	r0, r5
 80037b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037b4:	f000 b90c 	b.w	80039d0 <__malloc_unlock>
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	d908      	bls.n	80037ce <_free_r+0x42>
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	1821      	adds	r1, r4, r0
 80037c0:	428b      	cmp	r3, r1
 80037c2:	bf01      	itttt	eq
 80037c4:	6819      	ldreq	r1, [r3, #0]
 80037c6:	685b      	ldreq	r3, [r3, #4]
 80037c8:	1809      	addeq	r1, r1, r0
 80037ca:	6021      	streq	r1, [r4, #0]
 80037cc:	e7ed      	b.n	80037aa <_free_r+0x1e>
 80037ce:	461a      	mov	r2, r3
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b10b      	cbz	r3, 80037d8 <_free_r+0x4c>
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d9fa      	bls.n	80037ce <_free_r+0x42>
 80037d8:	6811      	ldr	r1, [r2, #0]
 80037da:	1850      	adds	r0, r2, r1
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d10b      	bne.n	80037f8 <_free_r+0x6c>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	4401      	add	r1, r0
 80037e4:	1850      	adds	r0, r2, r1
 80037e6:	4283      	cmp	r3, r0
 80037e8:	6011      	str	r1, [r2, #0]
 80037ea:	d1e0      	bne.n	80037ae <_free_r+0x22>
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4401      	add	r1, r0
 80037f2:	6011      	str	r1, [r2, #0]
 80037f4:	6053      	str	r3, [r2, #4]
 80037f6:	e7da      	b.n	80037ae <_free_r+0x22>
 80037f8:	d902      	bls.n	8003800 <_free_r+0x74>
 80037fa:	230c      	movs	r3, #12
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	e7d6      	b.n	80037ae <_free_r+0x22>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	1821      	adds	r1, r4, r0
 8003804:	428b      	cmp	r3, r1
 8003806:	bf01      	itttt	eq
 8003808:	6819      	ldreq	r1, [r3, #0]
 800380a:	685b      	ldreq	r3, [r3, #4]
 800380c:	1809      	addeq	r1, r1, r0
 800380e:	6021      	streq	r1, [r4, #0]
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6054      	str	r4, [r2, #4]
 8003814:	e7cb      	b.n	80037ae <_free_r+0x22>
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000140 	.word	0x20000140

0800381c <sbrk_aligned>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4e0e      	ldr	r6, [pc, #56]	; (8003858 <sbrk_aligned+0x3c>)
 8003820:	460c      	mov	r4, r1
 8003822:	6831      	ldr	r1, [r6, #0]
 8003824:	4605      	mov	r5, r0
 8003826:	b911      	cbnz	r1, 800382e <sbrk_aligned+0x12>
 8003828:	f000 f8bc 	bl	80039a4 <_sbrk_r>
 800382c:	6030      	str	r0, [r6, #0]
 800382e:	4621      	mov	r1, r4
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f8b7 	bl	80039a4 <_sbrk_r>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	d00a      	beq.n	8003850 <sbrk_aligned+0x34>
 800383a:	1cc4      	adds	r4, r0, #3
 800383c:	f024 0403 	bic.w	r4, r4, #3
 8003840:	42a0      	cmp	r0, r4
 8003842:	d007      	beq.n	8003854 <sbrk_aligned+0x38>
 8003844:	1a21      	subs	r1, r4, r0
 8003846:	4628      	mov	r0, r5
 8003848:	f000 f8ac 	bl	80039a4 <_sbrk_r>
 800384c:	3001      	adds	r0, #1
 800384e:	d101      	bne.n	8003854 <sbrk_aligned+0x38>
 8003850:	f04f 34ff 	mov.w	r4, #4294967295
 8003854:	4620      	mov	r0, r4
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	20000144 	.word	0x20000144

0800385c <_malloc_r>:
 800385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003860:	1ccd      	adds	r5, r1, #3
 8003862:	f025 0503 	bic.w	r5, r5, #3
 8003866:	3508      	adds	r5, #8
 8003868:	2d0c      	cmp	r5, #12
 800386a:	bf38      	it	cc
 800386c:	250c      	movcc	r5, #12
 800386e:	2d00      	cmp	r5, #0
 8003870:	4607      	mov	r7, r0
 8003872:	db01      	blt.n	8003878 <_malloc_r+0x1c>
 8003874:	42a9      	cmp	r1, r5
 8003876:	d905      	bls.n	8003884 <_malloc_r+0x28>
 8003878:	230c      	movs	r3, #12
 800387a:	2600      	movs	r6, #0
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4630      	mov	r0, r6
 8003880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003884:	4e2e      	ldr	r6, [pc, #184]	; (8003940 <_malloc_r+0xe4>)
 8003886:	f000 f89d 	bl	80039c4 <__malloc_lock>
 800388a:	6833      	ldr	r3, [r6, #0]
 800388c:	461c      	mov	r4, r3
 800388e:	bb34      	cbnz	r4, 80038de <_malloc_r+0x82>
 8003890:	4629      	mov	r1, r5
 8003892:	4638      	mov	r0, r7
 8003894:	f7ff ffc2 	bl	800381c <sbrk_aligned>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	4604      	mov	r4, r0
 800389c:	d14d      	bne.n	800393a <_malloc_r+0xde>
 800389e:	6834      	ldr	r4, [r6, #0]
 80038a0:	4626      	mov	r6, r4
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d140      	bne.n	8003928 <_malloc_r+0xcc>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	4631      	mov	r1, r6
 80038aa:	4638      	mov	r0, r7
 80038ac:	eb04 0803 	add.w	r8, r4, r3
 80038b0:	f000 f878 	bl	80039a4 <_sbrk_r>
 80038b4:	4580      	cmp	r8, r0
 80038b6:	d13a      	bne.n	800392e <_malloc_r+0xd2>
 80038b8:	6821      	ldr	r1, [r4, #0]
 80038ba:	3503      	adds	r5, #3
 80038bc:	1a6d      	subs	r5, r5, r1
 80038be:	f025 0503 	bic.w	r5, r5, #3
 80038c2:	3508      	adds	r5, #8
 80038c4:	2d0c      	cmp	r5, #12
 80038c6:	bf38      	it	cc
 80038c8:	250c      	movcc	r5, #12
 80038ca:	4638      	mov	r0, r7
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7ff ffa5 	bl	800381c <sbrk_aligned>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d02b      	beq.n	800392e <_malloc_r+0xd2>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	442b      	add	r3, r5
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	e00e      	b.n	80038fc <_malloc_r+0xa0>
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	1b52      	subs	r2, r2, r5
 80038e2:	d41e      	bmi.n	8003922 <_malloc_r+0xc6>
 80038e4:	2a0b      	cmp	r2, #11
 80038e6:	d916      	bls.n	8003916 <_malloc_r+0xba>
 80038e8:	1961      	adds	r1, r4, r5
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	6025      	str	r5, [r4, #0]
 80038ee:	bf18      	it	ne
 80038f0:	6059      	strne	r1, [r3, #4]
 80038f2:	6863      	ldr	r3, [r4, #4]
 80038f4:	bf08      	it	eq
 80038f6:	6031      	streq	r1, [r6, #0]
 80038f8:	5162      	str	r2, [r4, r5]
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	4638      	mov	r0, r7
 80038fe:	f104 060b 	add.w	r6, r4, #11
 8003902:	f000 f865 	bl	80039d0 <__malloc_unlock>
 8003906:	f026 0607 	bic.w	r6, r6, #7
 800390a:	1d23      	adds	r3, r4, #4
 800390c:	1af2      	subs	r2, r6, r3
 800390e:	d0b6      	beq.n	800387e <_malloc_r+0x22>
 8003910:	1b9b      	subs	r3, r3, r6
 8003912:	50a3      	str	r3, [r4, r2]
 8003914:	e7b3      	b.n	800387e <_malloc_r+0x22>
 8003916:	6862      	ldr	r2, [r4, #4]
 8003918:	42a3      	cmp	r3, r4
 800391a:	bf0c      	ite	eq
 800391c:	6032      	streq	r2, [r6, #0]
 800391e:	605a      	strne	r2, [r3, #4]
 8003920:	e7ec      	b.n	80038fc <_malloc_r+0xa0>
 8003922:	4623      	mov	r3, r4
 8003924:	6864      	ldr	r4, [r4, #4]
 8003926:	e7b2      	b.n	800388e <_malloc_r+0x32>
 8003928:	4634      	mov	r4, r6
 800392a:	6876      	ldr	r6, [r6, #4]
 800392c:	e7b9      	b.n	80038a2 <_malloc_r+0x46>
 800392e:	230c      	movs	r3, #12
 8003930:	4638      	mov	r0, r7
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	f000 f84c 	bl	80039d0 <__malloc_unlock>
 8003938:	e7a1      	b.n	800387e <_malloc_r+0x22>
 800393a:	6025      	str	r5, [r4, #0]
 800393c:	e7de      	b.n	80038fc <_malloc_r+0xa0>
 800393e:	bf00      	nop
 8003940:	20000140 	.word	0x20000140

08003944 <_realloc_r>:
 8003944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003948:	4680      	mov	r8, r0
 800394a:	4614      	mov	r4, r2
 800394c:	460e      	mov	r6, r1
 800394e:	b921      	cbnz	r1, 800395a <_realloc_r+0x16>
 8003950:	4611      	mov	r1, r2
 8003952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	f7ff bf81 	b.w	800385c <_malloc_r>
 800395a:	b92a      	cbnz	r2, 8003968 <_realloc_r+0x24>
 800395c:	f7ff ff16 	bl	800378c <_free_r>
 8003960:	4625      	mov	r5, r4
 8003962:	4628      	mov	r0, r5
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003968:	f000 f838 	bl	80039dc <_malloc_usable_size_r>
 800396c:	4284      	cmp	r4, r0
 800396e:	4607      	mov	r7, r0
 8003970:	d802      	bhi.n	8003978 <_realloc_r+0x34>
 8003972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003976:	d812      	bhi.n	800399e <_realloc_r+0x5a>
 8003978:	4621      	mov	r1, r4
 800397a:	4640      	mov	r0, r8
 800397c:	f7ff ff6e 	bl	800385c <_malloc_r>
 8003980:	4605      	mov	r5, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d0ed      	beq.n	8003962 <_realloc_r+0x1e>
 8003986:	42bc      	cmp	r4, r7
 8003988:	4622      	mov	r2, r4
 800398a:	4631      	mov	r1, r6
 800398c:	bf28      	it	cs
 800398e:	463a      	movcs	r2, r7
 8003990:	f7ff fed4 	bl	800373c <memcpy>
 8003994:	4631      	mov	r1, r6
 8003996:	4640      	mov	r0, r8
 8003998:	f7ff fef8 	bl	800378c <_free_r>
 800399c:	e7e1      	b.n	8003962 <_realloc_r+0x1e>
 800399e:	4635      	mov	r5, r6
 80039a0:	e7df      	b.n	8003962 <_realloc_r+0x1e>
	...

080039a4 <_sbrk_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	2300      	movs	r3, #0
 80039a8:	4d05      	ldr	r5, [pc, #20]	; (80039c0 <_sbrk_r+0x1c>)
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fd fb6e 	bl	8001090 <_sbrk>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_sbrk_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_sbrk_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	20000148 	.word	0x20000148

080039c4 <__malloc_lock>:
 80039c4:	4801      	ldr	r0, [pc, #4]	; (80039cc <__malloc_lock+0x8>)
 80039c6:	f000 b811 	b.w	80039ec <__retarget_lock_acquire_recursive>
 80039ca:	bf00      	nop
 80039cc:	2000014c 	.word	0x2000014c

080039d0 <__malloc_unlock>:
 80039d0:	4801      	ldr	r0, [pc, #4]	; (80039d8 <__malloc_unlock+0x8>)
 80039d2:	f000 b80c 	b.w	80039ee <__retarget_lock_release_recursive>
 80039d6:	bf00      	nop
 80039d8:	2000014c 	.word	0x2000014c

080039dc <_malloc_usable_size_r>:
 80039dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e0:	1f18      	subs	r0, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bfbc      	itt	lt
 80039e6:	580b      	ldrlt	r3, [r1, r0]
 80039e8:	18c0      	addlt	r0, r0, r3
 80039ea:	4770      	bx	lr

080039ec <__retarget_lock_acquire_recursive>:
 80039ec:	4770      	bx	lr

080039ee <__retarget_lock_release_recursive>:
 80039ee:	4770      	bx	lr

080039f0 <_init>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr

080039fc <_fini>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr
